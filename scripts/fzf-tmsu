#!/usr/bin/python3

# This script requies the following programs/environement variables to be installed:
# - tmsu
# - fzf
# - wsl-opener
# - $FILEMANAGER

import subprocess
from typing import Set, Union
import os
import sys

def files_for_tags(selected_tag_set: Set[str], database_path: Union[str, None]) -> Set[str]:
    arguments = ['tmsu']
    if database_path is not None:
        arguments.extend(['--database', database_path])
    arguments.append('files')
    arguments.extend(selected_tag_set)
    result = subprocess.run(arguments, capture_output=True, encoding='utf-8')
    return set(result.stdout.splitlines())

def tags_from_files(files: Set[str]) -> Set[str]:
    # Some day we may run into a limit for the number of files in a single query.
    # But today is not that day.
    arguments = ['tmsu', 'tags'] + list(files)
    result = subprocess.run(arguments, capture_output=True, encoding='utf-8')
    tags = set()

    for line in result.stdout.splitlines():
        split_line = line.split(':')
        all_tags = split_line[1].split()
        tags.update(all_tags)

    return tags


def try_open_dir(directory_path: str) -> None:
    # Try to open the directory.
        # Get environement variable FILEMANAGER
        # and open the directory with that filemanager
        filemanager = os.environ.get('FILEMANAGER')

        if filemanager is not None:
            subprocess.run([filemanager, directory_path])
        else:
            print('No $FILEMANAGER found')
        sys.exit()


def handle_selection(selection: str, selected_tag_set: Set[str], database_path: Union[str, None]) -> None:
    # Check if selection is a file.
    if os.path.isfile(selection):
        # Try to open the file
        open_process = subprocess.run(['wsl-opener', selection])

        # check for non-zero exit code
        if open_process.returncode != 0:
            # Try to open the directory the file is in
            file_directory = os.path.dirname(selection)
            try_open_dir(file_directory)

        sys.exit()
    elif os.path.isdir(selection):
        try_open_dir(selection)
    else: # Assume that the selection was a tag
        selected_tag_set.add(selection.strip())
        query(selected_tag_set, database_path)

def query(selected_tag_set: Set[str], database_path: Union[str, None]) -> None:
    files = files_for_tags(selected_tag_set, database_path)

    if len(files) == 0:
        print('No files found from current directory location')
        sys.exit()

    # Automatically handle a single file.
    if len(files) == 1:
        handle_selection(list(files)[0], selected_tag_set, database_path)

    tags = tags_from_files(files)

    file_list = list(files)
    file_list.sort()

    tag_list = list(tags - selected_tag_set)
    tag_list.sort()

    lines = [line + '\n' for line in  tag_list + file_list]

    fzf_input = ''.join(lines)

    # Have to run fzf like this otherwise it hangs
    process = subprocess.Popen(['fzf'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, encoding='utf-8')
    (stdout, _) = process.communicate(input=fzf_input)

    if process.returncode != 0:
        sys.exit()

    # Trim trailing newlines on stdout
    stdout = stdout.rstrip('\n')

    handle_selection(stdout, selected_tag_set, database_path)

def help_text() -> str:
    return '''
fzf-tmsu

USAGE: fzf-tmsu

Uses fzf and tmsu to quickly select files/directories from tags.
'''

if __name__ == "__main__":
    index = 1
    database_path = None
    while index < len(sys.argv):
        if sys.argv[index] == '-h' or sys.argv[index] == '--help':
            print(help_text(), end='')
            sys.exit()
        else:
            database_path = sys.argv[index]
        index += 1

    query(set(), database_path)
