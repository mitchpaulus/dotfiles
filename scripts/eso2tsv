#!/usr/bin/env python3
import sys

idx = 1

period = 'Hourly'
run_period = None

while idx < len(sys.argv):
    a = sys.argv[idx]
    idx+=1
    if a == "-h" or a == "--help":
        print("Usage: eso2tsv [-d|-m|-a|-r <RUN PERIOD>] < input.eso > output.tsv")
        sys.exit(0)
    elif a == "-m":
        period = 'Monthly'
    elif a == "-d":
        period = 'Daily'
    elif a == "-a":
        period = 'Annual'
    elif a == "-r":
        if idx >= len(sys.argv):
            print("Missing argument for -r", file=sys.stderr)
            sys.exit(1)
        run_period = sys.argv[idx]
        idx += 1
    else:
        print(f"Unknown option {sys.argv[idx]}", file=sys.stderr)
        sys.exit(1)

if run_period is None:
    print("Missing run period", file=sys.stderr)
    sys.exit(1)

def split_comment(line):
    # Find last '!' in line
    comment_idx = line.rfind("!")
    if comment_idx != -1:
        return line[:comment_idx].strip(), line[comment_idx+1:].strip()
    return line.strip(), ""

def strip_comment(line):
    comment_idx = line.find("!")
    if comment_idx != -1:
        return line[:comment_idx]
    return line

title_line = sys.stdin.readline()
in_data_dir = True
data_dict = {}
# For example, with line:
# 2095,1,BREAK ROOM,Zone Windows Total Heat Gain Rate [W] !Hourly
# data_dict["2095"] = "1,BREAK ROOM,Zone Windows Total Heat Gain Rate [W] !Hourly"

# Always have these to start:
# 1,5,Environment Title[],Latitude[deg],Longitude[deg],Time Zone[],Elevation[m]
# 2,8,Day of Simulation[],Month[],Day of Month[],DST Indicator[1=yes 0=no],Hour[],StartMinute[],EndMinute[],DayType
# 3,5,Cumulative Day of Simulation[],Month[],Day of Month[],DST Indicator[1=yes 0=no],DayType  ! When Daily Report Variables Requested
# 4,2,Cumulative Days of Simulation[],Month[]  ! When Monthly Report Variables Requested
# 5,1,Cumulative Days of Simulation[] ! When Run Period Report Variables Requested
# 6,1,Calendar Year of Simulation[] ! When Annual Report Variables Requested

# For a 2, have something like this
# 2,1, 7,21, 0, 1,15.00,30.00,SummerDesignDay
# or
# 2,1, 7,21, 0, 1, 0.00,60.00,SummerDesignDay
# For the hourly.

# 1	Day of Simulation[]
# 2	Month[]
# 3	Day of Month[]
# 4	DST Indicator[1=yes 0=no]
# 5	Hour[]
# 6	StartMinute[]
# 7	EndMinute[]
# 8	DayType

print("Datetime\tDayType\t", end="")

trend_id_order = []
trend_names = []

while in_data_dir:
    line = sys.stdin.readline().rstrip()
    if "End of Data Dictionary" in line:
        in_data_dir = False
    else:
        split_on_comment = split_comment(line)
        split_on_comma = [v.strip() for v in  split_on_comment[0].split(",")]
        id_num = split_on_comma[0]
        if int(id_num) <= 6:
            continue
        elif period == "Hourly" and split_on_comment[1] == "Hourly":
            trend_name = ",".join(split_on_comma[2:4])
            trend_id_order.append(id_num)
            trend_names.append(trend_name)
        elif period == "Daily" and "Daily" in split_on_comment[1]:
            trend_name = ",".join(split_on_comma[2:4])
            trend_id_order.append(id_num)
            trend_names.append(trend_name)
        elif period == "Monthly" and "Monthly" in split_on_comment[1]:
            trend_name = ",".join(split_on_comma[2:4])
            trend_id_order.append(id_num)
            trend_names.append(trend_name)
        elif period == "Annual" and "Annual" in split_on_comment[1]:
            trend_name = ",".join(split_on_comma[2:4])
            trend_id_order.append(id_num)
            trend_names.append(trend_name)

if len(trend_id_order) == 0:
    print(f"No trends found for the specified run period '{run_period}' and period '{period}'.", file=sys.stderr)
    sys.exit(1)

print("\t".join(trend_names))

# List of dictionaries, each dictionary is for a different run period.
data: list[dict[str, list[str]]] = []

# Mapping from integer trend id to current value for the time stamp
curr_data: dict[str, str] = {} # Only here for type checker

in_run_period = False
in_hourly = False

current_timestamp = ''

while True:
    line = sys.stdin.readline()
    if not line or "End of Data" in line:
        if any(curr_data):
            print(current_timestamp, end="")
            for trend_id in trend_id_order:
                curr_val = curr_data.get(trend_id)
                print(f"\t{curr_val}", end="")
            print() # End with newline
        break

    comma_idx = line.find(",")
    var_id = line[:comma_idx]

    if not in_run_period:
        # The 1 variable is the start of a new run period. Sizing runs and main runs are separated by this.
        if var_id == "1":
            second_comma = line.find(",", comma_idx + 1)
            run_period_name = line[comma_idx + 1:second_comma]
            if run_period_name.lower() == run_period.lower():
                in_run_period = True
        #  else:
            #  raise ValueError(f"Expected variable ID 1, got {var_id} in line: {line.strip()}")
    elif var_id == "1":
        # We reached the end of our period.
        if any(curr_data):
            print(current_timestamp, end="")
            for trend_id in trend_id_order:
                curr_val = curr_data.get(trend_id)
                print(f"\t{curr_val}", end="")
            print() # End with newline
        break
    elif var_id == "2": # New timestamp
        if len(curr_data) > 0:
            print(current_timestamp, end="")
            for trend_id in trend_id_order:
                curr_val = curr_data.get(trend_id)
                # print(trend_id.__repr__())
                print(f"\t{curr_val}", end="")
            print() # End with newline
            curr_data.clear()

        split_line = [v.strip() for v in line.split(",")]
        start_min = split_line[6]
        end_min = split_line[7]

        # This is to deal with sub hourly data, in which the start and end minute won't be 0 and 60.
        if start_min == "0.00" and end_min == "60.00":
            in_hourly = True
            month = int(split_line[2])
            day = int(split_line[3])
            hour = int(split_line[5]) - 1 # EnergyPlus is 1 - 24, we want 0 - 23
            day_type = split_line[8]
            year = 2024

            if period == "Hourly":
                timestamp = f"{year}-{month:02d}-{day:02d} {hour:02d}:00\t{day_type}"
            elif period == "Daily":
                timestamp = f"{year}-{month:02d}-{day:02d}\t{day_type}"
            elif period == "Monthly":
                timestamp = f"{year}-{month:02d}\t{day_type}"
            elif period == "Annual":
                timestamp = f"{year}\t{day_type}"
            else:
                raise ValueError(f"Unknown period: {period}")

            current_timestamp = timestamp
            # print(timestamp, end="")
    elif int(var_id) <= 6:
        #  in_hourly = False

        #  if len(curr_data) > 0:
            #  for trend_id in trend_id_order:
                #  curr_val = curr_data.get(trend_id)
                #  # print(trend_id.__repr__())
                #  print(f"\t{curr_val}", end="")
            #  print() # End with newline

        #  curr_data.clear()
        continue
    elif var_id in trend_id_order:
        split_line = [v.strip() for v in line.split(",")]
        curr_data[var_id] = split_line[1]
        # print(f"\t{split_line[1]}", end="")

    #  # The 1 variable is the start of a new run period. Sizing runs and main runs are separated by this.
    #  if var_id == "1":
        #  curr_data = {}
        #  data.append(curr_data)
        #  continue
    #  elif int(var_id) <= 6:
        #  continue

    #  if var_id not in curr_data:
        #  curr_data[var_id] = []

    #  curr_data[var_id].append(line)


#  keys: list[str] = []  #
#  hourly_data: list[list[str]] = []  # Length of keys, inner list is length of period

#  for d in data:
    #  for key, value_list in d.items():
        #  # Check for lists that have the correct length
        #  if len(value_list) == period:
            #  hourly_data.append(value_list)
            #  keys.append(key)

#  headers = []
#  header_lengths = [] # Length of keys/data
#  for key in keys:
    #  header_value = strip_comment(data_dict[key])
    #  first_comma = header_value.find(",")
    #  eso_count = int(header_value[:first_comma])

    #  headers.append(header_value[first_comma+1:])

    #  if eso_count == 1:
        #  headers.append(header_value[first_comma+1:])
        #  header_lengths.append(1)
    #  else:
        #  split_header = [v.strip() for v in header_value.split(",")]
        #  if eso_count == len(split_header) - 1:
            #  headers.extend(split_header[1:])
            #  header_lengths.append(eso_count)
        #  else:
            #  var_name = split_header[1]
            #  headers.append(var_name)
            #  header_lengths.append(1)

# print(headers, file=sys.stderr)

#  print("\t".join(headers))

#  for i in range(period):
    #  row = ['' for _ in range(len(keys))]
    #  for j, hour_data in enumerate(hourly_data):
        #  split_data = [v.strip() for v in hour_data[i].split(",")]
        #  # 1
        #  row[j] = split_data[1]
        #  #  field_count = header_lengths[j]
        #  #  row.extend(split_data[1:1+field_count])

    #  print("\t".join(row))
