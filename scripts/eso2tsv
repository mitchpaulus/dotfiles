#!/usr/bin/python3
import sys

idx = 1

period = 8760
run_period = None

while idx < len(sys.argv):
    if sys.argv[idx] == "-h" or sys.argv[idx] == "--help":
        print("Usage: eso2tsv [-d|-m|-a] < input.eso > output.tsv")
        sys.exit(0)
    elif sys.argv[idx] == "-m":
        period = 12
        idx += 1
    elif sys.argv[idx] == "-d":
        period = 365
        idx += 1
    elif sys.argv[idx] == "-a":
        period = 1
        idx += 1
    elif sys.argv[idx] == "-r":
        if idx + 1 >= len(sys.argv):
            print("Missing argument for -r", file=sys.stderr)
            sys.exit(1)
        run_period = int(sys.argv[idx + 1])
        idx += 2
    else:
        print(f"Unknown option {sys.argv[idx]}", file=sys.stderr)
        sys.exit(1)

    idx += 1


def strip_comment(line):
    comment_idx = line.find("!")
    if comment_idx != -1:
        return line[:comment_idx]
    return line

title_line = sys.stdin.readline()
in_data_dir = True
data_dict = {}
# For example, with line:
# 2095,1,BREAK ROOM,Zone Windows Total Heat Gain Rate [W] !Hourly
# data_dict["2095"] = "1,BREAK ROOM,Zone Windows Total Heat Gain Rate [W] !Hourly"

while in_data_dir:
    line = sys.stdin.readline()
    if "End of Data Dictionary" in line:
        in_data_dir = False
    else:
        comma_idx = line.find(",")
        data_dict[line[:comma_idx]] = line[comma_idx+1:].strip()

# List of dictionaries, each dictionary is for a different run period.
data: list[dict[str, list[str]]] = []
curr_data: dict[str, list[str]] = {} # Only here for type checker

while True:
    line = sys.stdin.readline()
    if not line or "End of Data" in line:
        break

    comma_idx = line.find(",")
    var_id = line[:comma_idx]

    # The 1 variable is the start of a new run period. Sizing runs and main runs are separated by this.
    if var_id == "1":
        curr_data = {}
        data.append(curr_data)
        continue
    elif int(var_id) <= 6:
        continue

    if var_id not in curr_data:
        curr_data[var_id] = []

    curr_data[var_id].append(line)


keys: list[str] = []  #
hourly_data: list[list[str]] = []  # Length of keys, inner list is length of period

for d in data:
    for key, value_list in d.items():
        # Check for lists that have the correct length
        if len(value_list) == period:
            hourly_data.append(value_list)
            keys.append(key)

headers = []
header_lengths = [] # Length of keys/data
for key in keys:
    header_value = strip_comment(data_dict[key])
    first_comma = header_value.find(",")
    eso_count = int(header_value[:first_comma])

    headers.append(header_value[first_comma+1:])

    #  if eso_count == 1:
        #  headers.append(header_value[first_comma+1:])
        #  header_lengths.append(1)
    #  else:
        #  split_header = [v.strip() for v in header_value.split(",")]
        #  if eso_count == len(split_header) - 1:
            #  headers.extend(split_header[1:])
            #  header_lengths.append(eso_count)
        #  else:
            #  var_name = split_header[1]
            #  headers.append(var_name)
            #  header_lengths.append(1)

# print(headers, file=sys.stderr)

print("\t".join(headers))

for i in range(period):
    row = ['' for _ in range(len(keys))]
    for j, hour_data in enumerate(hourly_data):
        split_data = [v.strip() for v in hour_data[i].split(",")]
        # 1
        row[j] = split_data[1]
        #  field_count = header_lengths[j]
        #  row.extend(split_data[1:1+field_count])

    print("\t".join(row))
