#!/usr/bin/env python3

import sys
import mputils
from ftplib import FTP
import gzip
from io import BytesIO
from typing import Union, List, TextIO, Optional, Tuple
import math
import requests
import psychrometrics as psy
import datetime
import os

# ISD Format (https://www1.ncdc.noaa.gov/pub/data/noaa/isd-format-document.pdf)
# 1-4: Total Variable Characters
# 5-10: USAF
# 11-15: WBAN
# 16-23: Date in YYYYMMDD form
# 24-27: UTC Time in HHMM form
# 28: Source
# 29-34: Latitude [+-][0-9]{5} Scaling factor: 1000 +99999 = Missing
# 35-41: Longitude [+-][0-9]{5}
# 42-46: Code
# 47-51: Elevation (m)
# 52-56: Call letter identifier
# 57-60: Quality control process name
# 61-63: Wind direction angle (The angle, measured in a clockwise direction, between true north and the direction from which the wind is blowing.) 999 = Missing
# 64: Wind direction quality
# 65: Wind direction Type
# 66-69: Wind speed (m/s) Scaling factor: 10, 9999 = Missing
# 70: Wind speed quality
# 71-75: Ceiling Height dimension (m)
# 76: Ceiling Height Quality
# 77: Ceiling determination code
# 78: CAVOK code
# 79-84: Visibility distance (m)
# 85: Visibility quality code
# 86: Visibility variability code
# 87: Visibility variability quality code
# 88-92: Dry Bulb Air Temperature (C), Scale factor: 10 [+-][0-9]{4} '+9999' is missing
# 93: Dry Bulb Air Temperature Quality
# 94-98: Dew Point Air Temperature (C), Scale factor: 10 [+-][0-9]{4} '+9999' is missing
# 99: Dew Point Temperature quality code
# 100-104: Air pressure (Hectopascals), Scale factor: 10 (99999 = Missing)
# 105: Air pressure quality code

class IsdRecord:
    def __init__(self, line: str) -> None:
        self.line = line
        self.total_variable_characters = line[0:4]
        self.usaf = line[4:10]
        self.wban = line[10:15]
        self.date = line[15:23]
        self.time = line[23:27]
        self.source = line[27]
        self.latitude = line[28:34]
        self.longitude = line[34:41]
        self.code = line[41:46]
        self.elevation = line[46:51]
        self.call_letter_identifier = line[51:56]
        self.quality_control_process_name = line[56:60]
        self.wind_direction_angle = line[60:63]
        self.wind_direction_quality = line[63]
        self.wind_direction_type = line[64]
        self.wind_speed = line[65:69]
        self.wind_speed_quality = line[69]
        self.ceiling_height_dimension = line[70:75]
        self.ceiling_height_quality = line[75]
        self.ceiling_determination_code = line[76]
        self.cavok_code = line[77]
        self.visibility_distance = line[78:84]
        self.visibility_quality_code = line[84]
        self.visibility_variability_code = line[85]
        self.visibility_variability_quality_code = line[86]
        self.dry_bulb_air_temperature = line[87:92]
        self.dry_bulb_air_temperature_quality = line[92]
        self.dew_point_air_temperature = line[93:98]
        self.dew_point_air_temperature_quality = line[98]
        self.air_pressure = line[99:104]
        self.air_pressure_quality = line[104]

        if int(self.total_variable_characters) > 0:
            self.additional_data = line[105:105 + int(self.total_variable_characters)]
        else:
            self.additional_data = ""

        if self.additional_data == "":
            return

        idx = 0
        # Check for a remarks section right away
        if (self.additional_data[0:3] == "REM"):
            self.remarks = self.additional_data[3:]

            # Remarks data section, fields 3 3 variable based on second field
            # GEOPHYSICAL-POINT-OBSERVATION remark identifier
            self.geophysical_point_observation_remark_identifier = self.additional_data[idx + 3:idx + 6]
            # GEOPHYSICAL-POINT-OBSERVATION remark length quantity
            self.geophysical_point_observation_remark_length_quantity = self.additional_data[idx + 6:idx + 9]

            remark_length = int(self.geophysical_point_observation_remark_length_quantity)

            # GEOPHYSICAL-POINT-OBSERVATION remark text
            self.geophysical_point_observation_remark_text = self.additional_data[idx + 9:idx + 9 + remark_length]

            idx += 9 + remark_length
            return

        # assert first 3 characters of additional data are "ADD"
        if (self.additional_data[0:3] != "ADD"):
            message = "Additional data does not start with ADD.\n"
            message += "Line: " + line + "\n"
            message += f"Total variable characters: {self.total_variable_characters}\n"
            message += f"Found length of additional data: {len(self.additional_data)}\n"
            message += "Additional data: '" + self.additional_data + "'\n"
            raise Exception(message)


        idx += 3 # For ADD

        while idx < len(self.additional_data):
            code = self.additional_data[idx:idx + 3]

            # Parse switch {{{

            if code.startswith("AA"):
                # Liquid precipitation, next fields are 2 4 1 1 = 8
                self.liquid_precipitation = self.additional_data[idx + 3:idx + 11]
                idx += 11

            elif code.startswith("AB1"):
                # LIQUID-PRECIPITATION MONTHLY TOTAL identifier, fields 5 1 1 = 7
                # LIQUID-PRECIPITATION MONTHLY TOTAL depth dimension
                self.liquid_precipitation_monthly_total_depth_dimension = self.additional_data[idx + 3:idx + 8]
                # LIQUID-PRECIPITATION MONTHLY TOTAL condition code
                self.liquid_precipitation_monthly_total_condition_code = self.additional_data[idx + 8:idx + 9]
                # LIQUID-PRECIPITATION MONTHLY TOTAL quality code
                self.liquid_precipitation_monthly_total_quality_code = self.additional_data[idx + 9:idx + 10]

                idx += 10

            elif code.startswith("AD1"):
                # LIQUID-PRECIPITATION GREATEST AMOUNT IN 24 HOURS, FOR THE MONTH identifier, fields 5 1 4 4 4 1
                # LIQUID-PRECIPITATION GREATEST AMOUNT IN 24 HOURS, FOR THE MONTH depth dimension
                self.liquid_precipitation_greatest_amount_in_24_hours_for_the_month_depth_dimension = self.additional_data[idx + 3:idx + 8]
                # LIQUID-PRECIPITATION GREATEST AMOUNT IN 24 HOURS, FOR THE MONTH condition code
                self.liquid_precipitation_greatest_amount_in_24_hours_for_the_month_condition_code = self.additional_data[idx + 8:idx + 9]
                # LIQUID-PRECIPITATION GREATEST AMOUNT IN 24 HOURS, FOR THE MONTH dates of occurrence
                self.liquid_precipitation_greatest_amount_in_24_hours_for_the_month_dates_of_occurrence = self.additional_data[idx + 9:idx + 13]
                # LIQUID-PRECIPITATION GREATEST AMOUNT IN 24 HOURS, FOR THE MONTH dates of occurrence
                self.liquid_precipitation_greatest_amount_in_24_hours_for_the_month_dates_of_occurrence_2 = self.additional_data[idx + 13:idx + 17]
                # LIQUID-PRECIPITATION GREATEST AMOUNT IN 24 HOURS, FOR THE MONTH dates of occurrence
                self.liquid_precipitation_greatest_amount_in_24_hours_for_the_month_dates_of_occurrence_3 = self.additional_data[idx + 17:idx + 21]
                # LIQUID-PRECIPITATION GREATEST AMOUNT IN 24 HOURS, FOR THE MONTH quality code
                self.liquid_precipitation_greatest_amount_in_24_hours_for_the_month_quality_code = self.additional_data[idx + 21:idx + 22]

                idx += 22

            elif code.startswith("AE1"):
                # LIQUID-PRECIPITATION, NUMBER OF DAYS WITH SPECIFIC AMOUNTS, FOR THE MONTH identifier, fields 2 1 2 1 2 1 2 1 = 12
                # LIQUID-PRECIPITATION, NUMBER OF DAYS WITH SPECIFIC AMOUNTS, FOR THE MONTH 0.01 inch or more
                self.liquid_precipitation_number_of_days_with_specific_amounts_for_the_month_001_inch_or_more = self.additional_data[idx + 3:idx + 5]
                # LIQUID-PRECIPITATION, NUMBER OF DAYS WITH SPECIFIC AMOUNTS, FOR THE MONTH 0.01 inch or more quality code
                self.liquid_precipitation_number_of_days_with_specific_amounts_for_the_month_001_inch_or_more_quality_code = self.additional_data[idx + 5:idx + 6]
                # LIQUID-PRECIPITATION, NUMBER OF DAYS WITH SPECIFIC AMOUNTS, FOR THE MONTH 0.10 inch or more
                self.liquid_precipitation_number_of_days_with_specific_amounts_for_the_month_010_inch_or_more = self.additional_data[idx + 6:idx + 8]
                # LIQUID-PRECIPITATION, NUMBER OF DAYS WITH SPECIFIC AMOUNTS, FOR THE MONTH 0.10 inch or more quality code
                self.liquid_precipitation_number_of_days_with_specific_amounts_for_the_month_010_inch_or_more_quality_code = self.additional_data[idx + 8:idx + 9]
                # LIQUID-PRECIPITATION, NUMBER OF DAYS WITH SPECIFIC AMOUNTS, FOR THE MONTH 0.50 inch or more
                self.liquid_precipitation_number_of_days_with_specific_amounts_for_the_month_050_inch_or_more = self.additional_data[idx + 9:idx + 11]
                # LIQUID-PRECIPITATION, NUMBER OF DAYS WITH SPECIFIC AMOUNTS, FOR THE MONTH 0.50 inch or more quality code
                self.liquid_precipitation_number_of_days_with_specific_amounts_for_the_month_050_inch_or_more_quality_code = self.additional_data[idx + 11:idx + 12]
                # LIQUID-PRECIPITATION, NUMBER OF DAYS WITH SPECIFIC AMOUNTS, FOR THE MONTH 1.00 inch or more
                self.liquid_precipitation_number_of_days_with_specific_amounts_for_the_month_100_inch_or_more = self.additional_data[idx + 12:idx + 14]
                # LIQUID-PRECIPITATION, NUMBER OF DAYS WITH SPECIFIC AMOUNTS, FOR THE MONTH 1.00 inch or more quality code
                self.liquid_precipitation_number_of_days_with_specific_amounts_for_the_month_100_inch_or_more_quality_code = self.additional_data[idx + 14:idx + 15]

                idx += 15

            elif code.startswith("AH") and code[2].isdigit():
                num = code[2]
                setattr(self, f"liquid_precipitation_maximum_short_duration_for_the_month_period_quantity_{num}", self.additional_data[idx + 3:idx + 6])
                setattr(self, f"liquid_precipitation_maximum_short_duration_for_the_month_depth_dimension_{num}", self.additional_data[idx + 6:idx + 10])
                setattr(self, f"liquid_precipitation_maximum_short_duration_for_the_month_condition_code_{num}", self.additional_data[idx + 10:idx + 11])
                setattr(self, f"liquid_precipitation_maximum_short_duration_for_the_month_ending_date_time_{num}", self.additional_data[idx + 11:idx + 17])
                setattr(self, f"liquid_precipitation_maximum_short_duration_for_the_month_quality_code_{num}", self.additional_data[idx + 17:idx + 18])
                idx += 18


            elif code.startswith("AI1"):
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH identifier, fields 3 4 1 6 1 = 15
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH period quantity
                self.liquid_precipitation_maximum_short_duration_for_the_month_period_quantity_1 = self.additional_data[idx + 3:idx + 6]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH depth dimension
                self.liquid_precipitation_maximum_short_duration_for_the_month_depth_dimension_1 = self.additional_data[idx + 6:idx + 10]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH condition code
                self.liquid_precipitation_maximum_short_duration_for_the_month_condition_code_1 = self.additional_data[idx + 10:idx + 11]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH ending date-time
                self.liquid_precipitation_maximum_short_duration_for_the_month_ending_date_time_1 = self.additional_data[idx + 11:idx + 17]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH quality code
                self.liquid_precipitation_maximum_short_duration_for_the_month_quality_code_1 = self.additional_data[idx + 17:idx + 18]

                idx += 18

            elif code.startswith("AI2"):
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH identifier, fields 3 4 1 6 1 = 15
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH period quantity
                self.liquid_precipitation_maximum_short_duration_for_the_month_period_quantity_2 = self.additional_data[idx + 3:idx + 6]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH depth dimension
                self.liquid_precipitation_maximum_short_duration_for_the_month_depth_dimension_2 = self.additional_data[idx + 6:idx + 10]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH condition code
                self.liquid_precipitation_maximum_short_duration_for_the_month_condition_code_2 = self.additional_data[idx + 10:idx + 11]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH ending date-time
                self.liquid_precipitation_maximum_short_duration_for_the_month_ending_date_time_2 = self.additional_data[idx + 11:idx + 17]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH quality code
                self.liquid_precipitation_maximum_short_duration_for_the_month_quality_code_2 = self.additional_data[idx + 17:idx + 18]

                idx += 18

            elif code.startswith("AI3"):
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH identifier, fields 3 4 1 6 1 = 15
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH period quantity
                self.liquid_precipitation_maximum_short_duration_for_the_month_period_quantity_3 = self.additional_data[idx + 3:idx + 6]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH depth dimension
                self.liquid_precipitation_maximum_short_duration_for_the_month_depth_dimension_3 = self.additional_data[idx + 6:idx + 10]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH condition code
                self.liquid_precipitation_maximum_short_duration_for_the_month_condition_code_3 = self.additional_data[idx + 10:idx + 11]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH ending date-time
                self.liquid_precipitation_maximum_short_duration_for_the_month_ending_date_time_3 = self.additional_data[idx + 11:idx + 17]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH quality code
                self.liquid_precipitation_maximum_short_duration_for_the_month_quality_code_3 = self.additional_data[idx + 17:idx + 18]

                idx += 18

            elif code.startswith("AI4"):
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH identifier, fields 3 4 1 6 1 = 15
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH period quantity
                self.liquid_precipitation_maximum_short_duration_for_the_month_period_quantity_4 = self.additional_data[idx + 3:idx + 6]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH depth dimension
                self.liquid_precipitation_maximum_short_duration_for_the_month_depth_dimension_4 = self.additional_data[idx + 6:idx + 10]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH condition code
                self.liquid_precipitation_maximum_short_duration_for_the_month_condition_code_4 = self.additional_data[idx + 10:idx + 11]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH ending date-time
                self.liquid_precipitation_maximum_short_duration_for_the_month_ending_date_time_4 = self.additional_data[idx + 11:idx + 17]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH quality code
                self.liquid_precipitation_maximum_short_duration_for_the_month_quality_code_4 = self.additional_data[idx + 17:idx + 18]

                idx += 18

            elif code.startswith("AI5"):
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH identifier, fields 3 4 1 6 1 = 15
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH period quantity
                self.liquid_precipitation_maximum_short_duration_for_the_month_period_quantity_5 = self.additional_data[idx + 3:idx + 6]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH depth dimension
                self.liquid_precipitation_maximum_short_duration_for_the_month_depth_dimension_5 = self.additional_data[idx + 6:idx + 10]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH condition code
                self.liquid_precipitation_maximum_short_duration_for_the_month_condition_code_5 = self.additional_data[idx + 10:idx + 11]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH ending date-time
                self.liquid_precipitation_maximum_short_duration_for_the_month_ending_date_time_5 = self.additional_data[idx + 11:idx + 17]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH quality code
                self.liquid_precipitation_maximum_short_duration_for_the_month_quality_code_5 = self.additional_data[idx + 17:idx + 18]

                idx += 18

            elif code.startswith("AI6"):
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH identifier, fields 3 4 1 6 1 = 15
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH period quantity
                self.liquid_precipitation_maximum_short_duration_for_the_month_period_quantity_6 = self.additional_data[idx + 3:idx + 6]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH depth dimension
                self.liquid_precipitation_maximum_short_duration_for_the_month_depth_dimension_6 = self.additional_data[idx + 6:idx + 10]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH condition code
                self.liquid_precipitation_maximum_short_duration_for_the_month_condition_code_6 = self.additional_data[idx + 10:idx + 11]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH ending date-time
                self.liquid_precipitation_maximum_short_duration_for_the_month_ending_date_time_6 = self.additional_data[idx + 11:idx + 17]
                # LIQUID-PRECIPITATION MAXIMUM SHORT DURATION, FOR THE MONTH quality code
                self.liquid_precipitation_maximum_short_duration_for_the_month_quality_code_6 = self.additional_data[idx + 17:idx + 18]

                idx += 18

            elif code.startswith("AJ1"):
                # SNOW-DEPTH, fields 4 1 1 6 1 1 = 14
                # SNOW-DEPTH dimension
                self.snow_depth_dimension = self.additional_data[idx + 3:idx + 7]
                # SNOW-DEPTH condition code
                self.snow_depth_condition_code = self.additional_data[idx + 7:idx + 8]
                # SNOW-DEPTH quality code
                self.snow_depth_quality_code = self.additional_data[idx + 8:idx + 9]
                # SNOW-DEPTH equivalent water depth dimension
                self.snow_depth_equivalent_water_depth_dimension = self.additional_data[idx + 9:idx + 15]
                # SNOW-DEPTH equivalent water condition code
                self.snow_depth_equivalent_water_condition_code = self.additional_data[idx + 15:idx + 16]
                # SNOW-DEPTH equivalent water condition quality code
                self.snow_depth_equivalent_water_condition_quality_code = self.additional_data[idx + 16:idx + 17]

                idx += 17

            elif code.startswith("AK1"):
                # SNOW-DEPTH GREATEST DEPTH ON THE GROUND, FOR THE MONTH identifier, fields 4 1 6 1 = 12
                # SNOW-DEPTH GREATEST DEPTH ON THE GROUND, FOR THE MONTH depth dimension
                self.snow_depth_greatest_depth_on_the_ground_for_the_month_depth_dimension = self.additional_data[idx + 3:idx + 7]
                # SNOW-DEPTH GREATEST DEPTH ON THE GROUND, FOR THE MONTH condition code
                self.snow_depth_greatest_depth_on_the_ground_for_the_month_condition_code = self.additional_data[idx + 7:idx + 8]
                # SNOW-DEPTH GREATEST DEPTH ON THE GROUND, FOR THE MONTH dates of occurrence
                self.snow_depth_greatest_depth_on_the_ground_for_the_month_dates_of_occurrence = self.additional_data[idx + 8:idx + 14]
                # SNOW-DEPTH GREATEST DEPTH ON THE GROUND, FOR THE MONTH quality code
                self.snow_depth_greatest_depth_on_the_ground_for_the_month_quality_code = self.additional_data[idx + 14:idx + 15]

                idx += 15

            elif code.startswith("AL1"):
                # SNOW-ACCUMULATION occurrence, fields 2 3 1 1 = 7
                # SNOW-ACCUMULATION period quantity
                self.snow_accumulation_period_quantity_1 = self.additional_data[idx + 3:idx + 5]
                # SNOW-ACCUMULATION depth dimension
                self.snow_accumulation_depth_dimension_1 = self.additional_data[idx + 5:idx + 8]
                # SNOW-ACCUMULATION condition code
                self.snow_accumulation_condition_code_1 = self.additional_data[idx + 8:idx + 9]
                # SNOW-ACCUMULATION quality code
                self.snow_accumulation_quality_code_1 = self.additional_data[idx + 9:idx + 10]

                idx += 10

            elif code.startswith("AL2"):
                # SNOW-ACCUMULATION occurrence, fields 2 3 1 1 = 7
                # SNOW-ACCUMULATION period quantity
                self.snow_accumulation_period_quantity_2 = self.additional_data[idx + 3:idx + 5]
                # SNOW-ACCUMULATION depth dimension
                self.snow_accumulation_depth_dimension_2 = self.additional_data[idx + 5:idx + 8]
                # SNOW-ACCUMULATION condition code
                self.snow_accumulation_condition_code_2 = self.additional_data[idx + 8:idx + 9]
                # SNOW-ACCUMULATION quality code
                self.snow_accumulation_quality_code_2 = self.additional_data[idx + 9:idx + 10]

                idx += 10

            elif code.startswith("AM1"):
                # SNOW-ACCUMULATION GREATEST AMOUNT IN 24 HOURS, FOR THE MONTH identifier, fields 4 1 4 4 4 1 = 18
                # SNOW-ACCUMULATION GREATEST AMOUNT IN 24 HOURS, FOR THE MONTH depth dimension
                self.snow_accumulation_greatest_amount_in_24_hours_for_the_month_depth_dimension = self.additional_data[idx + 3:idx + 7]
                # SNOW-ACCUMULATION GREATEST AMOUNT IN 24 HOURS, FOR THE MONTH condition code
                self.snow_accumulation_greatest_amount_in_24_hours_for_the_month_condition_code = self.additional_data[idx + 7:idx + 8]
                # SNOW-ACCUMULATION GREATEST AMOUNT IN 24 HOURS, FOR THE MONTH dates of occurrence
                self.snow_accumulation_greatest_amount_in_24_hours_for_the_month_dates_of_occurrence = self.additional_data[idx + 8:idx + 12]
                # SNOW-ACCUMULATION GREATEST AMOUNT IN 24 HOURS, FOR THE MONTH dates of occurrence
                self.snow_accumulation_greatest_amount_in_24_hours_for_the_month_dates_of_occurrence_2 = self.additional_data[idx + 12:idx + 16]
                # SNOW-ACCUMULATION GREATEST AMOUNT IN 24 HOURS, FOR THE MONTH dates of occurrence
                self.snow_accumulation_greatest_amount_in_24_hours_for_the_month_dates_of_occurrence_3 = self.additional_data[idx + 16:idx + 20]
                # SNOW-ACCUMULATION GREATEST AMOUNT IN 24 HOURS, FOR THE MONTH quality code
                self.snow_accumulation_greatest_amount_in_24_hours_for_the_month_quality_code = self.additional_data[idx + 20:idx + 21]

                idx += 21

            elif code.startswith("AN1"):
                # SNOW-ACCUMULATION FOR THE DAY/MONTH occurrence, fields 3 4 1 1
                # SNOW-ACCUMULATION period quantity
                self.snow_accumulation_for_the_day_month_period_quantity = self.additional_data[idx + 3:idx + 6]
                # SNOW ACCUMULATION FOR THE MONTH depth dimension
                self.snow_accumulation_for_the_month_depth_dimension = self.additional_data[idx + 6:idx + 10]
                # SNOW-ACCUMULATION FOR THE MONTH condition code
                self.snow_accumulation_for_the_month_condition_code = self.additional_data[idx + 10:idx + 11]
                # SNOW-ACCUMULATION FOR THE MONTH quality code
                self.snow_accumulation_for_the_month_quality_code = self.additional_data[idx + 11:idx + 12]

                idx += 12

            elif code.startswith("AT1"):
                # PRESENT-WEATHER-OBSERVATION automated occurrence identifier for ASOS/AWOS data, fields 2 2 4 1 = 9
                # DAILY-PRESENT-WEATHER-OBSERVATION source element
                self.daily_present_weather_observation_source_element_1 = self.additional_data[idx + 3:idx + 5]
                # DAILY-PRESENT-WEATHER-OBSERVATION weather type
                self.daily_present_weather_observation_weather_type_1 = self.additional_data[idx + 5:idx + 7]
                # DAILY-PRESENT-WEATHER-OBSERVATION weather type abbreviation
                self.daily_present_weather_observation_weather_type_abbreviation_1 = self.additional_data[idx + 7:idx + 11]
                # DAILY-PRESENT-WEATHER-OBSERVATION quality code
                self.daily_present_weather_observation_quality_code_1 = self.additional_data[idx + 11:idx + 12]

                idx += 12

            elif code.startswith("AT2"):
                # PRESENT-WEATHER-OBSERVATION automated occurrence identifier for ASOS/AWOS data, fields 2 2 4 1 = 9
                # DAILY-PRESENT-WEATHER-OBSERVATION source element
                self.daily_present_weather_observation_source_element_2 = self.additional_data[idx + 3:idx + 5]
                # DAILY-PRESENT-WEATHER-OBSERVATION weather type
                self.daily_present_weather_observation_weather_type_2 = self.additional_data[idx + 5:idx + 7]
                # DAILY-PRESENT-WEATHER-OBSERVATION weather type abbreviation
                self.daily_present_weather_observation_weather_type_abbreviation_2 = self.additional_data[idx + 7:idx + 11]
                # DAILY-PRESENT-WEATHER-OBSERVATION quality code
                self.daily_present_weather_observation_quality_code_2 = self.additional_data[idx + 11:idx + 12]

                idx += 12

            elif code.startswith("AT3"):
                # PRESENT-WEATHER-OBSERVATION automated occurrence identifier for ASOS/AWOS data, fields 2 2 4 1 = 9
                # DAILY-PRESENT-WEATHER-OBSERVATION source element
                self.daily_present_weather_observation_source_element_3 = self.additional_data[idx + 3:idx + 5]
                # DAILY-PRESENT-WEATHER-OBSERVATION weather type
                self.daily_present_weather_observation_weather_type_3 = self.additional_data[idx + 5:idx + 7]
                # DAILY-PRESENT-WEATHER-OBSERVATION weather type abbreviation
                self.daily_present_weather_observation_weather_type_abbreviation_3 = self.additional_data[idx + 7:idx + 11]
                # DAILY-PRESENT-WEATHER-OBSERVATION quality code
                self.daily_present_weather_observation_quality_code_3 = self.additional_data[idx + 11:idx + 12]

                idx += 12

            elif code.startswith("AT4"):
                # PRESENT-WEATHER-OBSERVATION automated occurrence identifier for ASOS/AWOS data, fields 2 2 4 1 = 9
                # DAILY-PRESENT-WEATHER-OBSERVATION source element
                self.daily_present_weather_observation_source_element_4 = self.additional_data[idx + 3:idx + 5]
                # DAILY-PRESENT-WEATHER-OBSERVATION weather type
                self.daily_present_weather_observation_weather_type_4 = self.additional_data[idx + 5:idx + 7]
                # DAILY-PRESENT-WEATHER-OBSERVATION weather type abbreviation
                self.daily_present_weather_observation_weather_type_abbreviation_4 = self.additional_data[idx + 7:idx + 11]
                # DAILY-PRESENT-WEATHER-OBSERVATION quality code
                self.daily_present_weather_observation_quality_code_4 = self.additional_data[idx + 11:idx + 12]

                idx += 12

            elif code.startswith("AT5"):
                # PRESENT-WEATHER-OBSERVATION automated occurrence identifier for ASOS/AWOS data, fields 2 2 4 1 = 9
                # DAILY-PRESENT-WEATHER-OBSERVATION source element
                self.daily_present_weather_observation_source_element_5 = self.additional_data[idx + 3:idx + 5]
                # DAILY-PRESENT-WEATHER-OBSERVATION weather type
                self.daily_present_weather_observation_weather_type_5 = self.additional_data[idx + 5:idx + 7]
                # DAILY-PRESENT-WEATHER-OBSERVATION weather type abbreviation
                self.daily_present_weather_observation_weather_type_abbreviation_5 = self.additional_data[idx + 7:idx + 11]
                # DAILY-PRESENT-WEATHER-OBSERVATION quality code
                self.daily_present_weather_observation_quality_code_5 = self.additional_data[idx + 11:idx + 12]

                idx += 12

            elif code.startswith("AT6"):
                # PRESENT-WEATHER-OBSERVATION automated occurrence identifier for ASOS/AWOS data, fields 2 2 4 1 = 9
                # DAILY-PRESENT-WEATHER-OBSERVATION source element
                self.daily_present_weather_observation_source_element_6 = self.additional_data[idx + 3:idx + 5]
                # DAILY-PRESENT-WEATHER-OBSERVATION weather type
                self.daily_present_weather_observation_weather_type_6 = self.additional_data[idx + 5:idx + 7]
                # DAILY-PRESENT-WEATHER-OBSERVATION weather type abbreviation
                self.daily_present_weather_observation_weather_type_abbreviation_6 = self.additional_data[idx + 7:idx + 11]
                # DAILY-PRESENT-WEATHER-OBSERVATION quality code
                self.daily_present_weather_observation_quality_code_6 = self.additional_data[idx + 11:idx + 12]

                idx += 12

            elif code.startswith("AT7"):
                # PRESENT-WEATHER-OBSERVATION automated occurrence identifier for ASOS/AWOS data, fields 2 2 4 1 = 9
                # DAILY-PRESENT-WEATHER-OBSERVATION source element
                self.daily_present_weather_observation_source_element_7 = self.additional_data[idx + 3:idx + 5]
                # DAILY-PRESENT-WEATHER-OBSERVATION weather type
                self.daily_present_weather_observation_weather_type_7 = self.additional_data[idx + 5:idx + 7]
                # DAILY-PRESENT-WEATHER-OBSERVATION weather type abbreviation
                self.daily_present_weather_observation_weather_type_abbreviation_7 = self.additional_data[idx + 7:idx + 11]
                # DAILY-PRESENT-WEATHER-OBSERVATION quality code
                self.daily_present_weather_observation_quality_code_7 = self.additional_data[idx + 11:idx + 12]

                idx += 12

            elif code.startswith("AT8"):
                # PRESENT-WEATHER-OBSERVATION automated occurrence identifier for ASOS/AWOS data, fields 2 2 4 1 = 9
                # DAILY-PRESENT-WEATHER-OBSERVATION source element
                self.daily_present_weather_observation_source_element_8 = self.additional_data[idx + 3:idx + 5]
                # DAILY-PRESENT-WEATHER-OBSERVATION weather type
                self.daily_present_weather_observation_weather_type_8 = self.additional_data[idx + 5:idx + 7]
                # DAILY-PRESENT-WEATHER-OBSERVATION weather type abbreviation
                self.daily_present_weather_observation_weather_type_abbreviation_8 = self.additional_data[idx + 7:idx + 11]
                # DAILY-PRESENT-WEATHER-OBSERVATION quality code
                self.daily_present_weather_observation_quality_code_8 = self.additional_data[idx + 11:idx + 12]

                idx += 12


            elif code.startswith("AU1"):
                # PRESENT-WEATHER-OBSERVATION intensity, fields 1 1 2 1 1 1 1 = 8
                # PRESENT-WEATHER-OBSERVATION intensity and proximity code
                self.present_weather_observation_intensity_and_proximity_code_1 = self.additional_data[idx + 3:idx + 4]
                # PRESENT-WEATHER-OBSERVATION descriptor code
                self.present_weather_observation_descriptor_code_1 = self.additional_data[idx + 4:idx + 5]
                # PRESENT-WEATHER-OBSERVATION precipitation code
                self.present_weather_observation_precipitation_code_1 = self.additional_data[idx + 5:idx + 7]
                # PRESENT-WEATHER-OBSERVATION obscuration code
                self.present_weather_observation_obscuration_code_1 = self.additional_data[idx + 7:idx + 8]
                # PRESENT-WEATHER-OBSERVATION other weather phenomena code
                self.present_weather_observation_other_weather_phenomena_code_1 = self.additional_data[idx + 8:idx + 9]
                # PRESENT-WEATHER-OBSERVATION combination indicator code
                self.present_weather_observation_combination_indicator_code_1 = self.additional_data[idx + 9:idx + 10]
                # PRESENT-WEATHER-OBSERVATION quality code
                self.present_weather_observation_quality_code_1 = self.additional_data[idx + 10:idx + 11]

                idx += 11

            elif code.startswith("AU2"):
                # PRESENT-WEATHER-OBSERVATION intensity, fields 1 1 2 1 1 1 1 = 8
                # PRESENT-WEATHER-OBSERVATION intensity and proximity code
                self.present_weather_observation_intensity_and_proximity_code_2 = self.additional_data[idx + 3:idx + 4]
                # PRESENT-WEATHER-OBSERVATION descriptor code
                self.present_weather_observation_descriptor_code_2 = self.additional_data[idx + 4:idx + 5]
                # PRESENT-WEATHER-OBSERVATION precipitation code
                self.present_weather_observation_precipitation_code_2 = self.additional_data[idx + 5:idx + 7]
                # PRESENT-WEATHER-OBSERVATION obscuration code
                self.present_weather_observation_obscuration_code_2 = self.additional_data[idx + 7:idx + 8]
                # PRESENT-WEATHER-OBSERVATION other weather phenomena code
                self.present_weather_observation_other_weather_phenomena_code_2 = self.additional_data[idx + 8:idx + 9]
                # PRESENT-WEATHER-OBSERVATION combination indicator code
                self.present_weather_observation_combination_indicator_code_2 = self.additional_data[idx + 9:idx + 10]
                # PRESENT-WEATHER-OBSERVATION quality code
                self.present_weather_observation_quality_code_2 = self.additional_data[idx + 10:idx + 11]

                idx += 11

            elif code.startswith("AU3"):
                # PRESENT-WEATHER-OBSERVATION intensity, fields 1 1 2 1 1 1 1 = 8
                # PRESENT-WEATHER-OBSERVATION intensity and proximity code
                self.present_weather_observation_intensity_and_proximity_code_3 = self.additional_data[idx + 3:idx + 4]
                # PRESENT-WEATHER-OBSERVATION descriptor code
                self.present_weather_observation_descriptor_code_3 = self.additional_data[idx + 4:idx + 5]
                # PRESENT-WEATHER-OBSERVATION precipitation code
                self.present_weather_observation_precipitation_code_3 = self.additional_data[idx + 5:idx + 7]
                # PRESENT-WEATHER-OBSERVATION obscuration code
                self.present_weather_observation_obscuration_code_3 = self.additional_data[idx + 7:idx + 8]
                # PRESENT-WEATHER-OBSERVATION other weather phenomena code
                self.present_weather_observation_other_weather_phenomena_code_3 = self.additional_data[idx + 8:idx + 9]
                # PRESENT-WEATHER-OBSERVATION combination indicator code
                self.present_weather_observation_combination_indicator_code_3 = self.additional_data[idx + 9:idx + 10]
                # PRESENT-WEATHER-OBSERVATION quality code
                self.present_weather_observation_quality_code_3 = self.additional_data[idx + 10:idx + 11]

                idx += 11

            elif code.startswith("AU4"):
                # PRESENT-WEATHER-OBSERVATION intensity, fields 1 1 2 1 1 1 1 = 8
                # PRESENT-WEATHER-OBSERVATION intensity and proximity code
                self.present_weather_observation_intensity_and_proximity_code_4 = self.additional_data[idx + 3:idx + 4]
                # PRESENT-WEATHER-OBSERVATION descriptor code
                self.present_weather_observation_descriptor_code_4 = self.additional_data[idx + 4:idx + 5]
                # PRESENT-WEATHER-OBSERVATION precipitation code
                self.present_weather_observation_precipitation_code_4 = self.additional_data[idx + 5:idx + 7]
                # PRESENT-WEATHER-OBSERVATION obscuration code
                self.present_weather_observation_obscuration_code_4 = self.additional_data[idx + 7:idx + 8]
                # PRESENT-WEATHER-OBSERVATION other weather phenomena code
                self.present_weather_observation_other_weather_phenomena_code_4 = self.additional_data[idx + 8:idx + 9]
                # PRESENT-WEATHER-OBSERVATION combination indicator code
                self.present_weather_observation_combination_indicator_code_4 = self.additional_data[idx + 9:idx + 10]
                # PRESENT-WEATHER-OBSERVATION quality code
                self.present_weather_observation_quality_code_4 = self.additional_data[idx + 10:idx + 11]

                idx += 11

            elif code.startswith("AU5"):
                # PRESENT-WEATHER-OBSERVATION intensity, fields 1 1 2 1 1 1 1 = 8
                # PRESENT-WEATHER-OBSERVATION intensity and proximity code
                self.present_weather_observation_intensity_and_proximity_code_5 = self.additional_data[idx + 3:idx + 4]
                # PRESENT-WEATHER-OBSERVATION descriptor code
                self.present_weather_observation_descriptor_code_5 = self.additional_data[idx + 4:idx + 5]
                # PRESENT-WEATHER-OBSERVATION precipitation code
                self.present_weather_observation_precipitation_code_5 = self.additional_data[idx + 5:idx + 7]
                # PRESENT-WEATHER-OBSERVATION obscuration code
                self.present_weather_observation_obscuration_code_5 = self.additional_data[idx + 7:idx + 8]
                # PRESENT-WEATHER-OBSERVATION other weather phenomena code
                self.present_weather_observation_other_weather_phenomena_code_5 = self.additional_data[idx + 8:idx + 9]
                # PRESENT-WEATHER-OBSERVATION combination indicator code
                self.present_weather_observation_combination_indicator_code_5 = self.additional_data[idx + 9:idx + 10]
                # PRESENT-WEATHER-OBSERVATION quality code
                self.present_weather_observation_quality_code_5 = self.additional_data[idx + 10:idx + 11]

                idx += 11

            elif code.startswith("AU6"):
                # PRESENT-WEATHER-OBSERVATION intensity, fields 1 1 2 1 1 1 1 = 8
                # PRESENT-WEATHER-OBSERVATION intensity and proximity code
                self.present_weather_observation_intensity_and_proximity_code_6 = self.additional_data[idx + 3:idx + 4]
                # PRESENT-WEATHER-OBSERVATION descriptor code
                self.present_weather_observation_descriptor_code_6 = self.additional_data[idx + 4:idx + 5]
                # PRESENT-WEATHER-OBSERVATION precipitation code
                self.present_weather_observation_precipitation_code_6 = self.additional_data[idx + 5:idx + 7]
                # PRESENT-WEATHER-OBSERVATION obscuration code
                self.present_weather_observation_obscuration_code_6 = self.additional_data[idx + 7:idx + 8]
                # PRESENT-WEATHER-OBSERVATION other weather phenomena code
                self.present_weather_observation_other_weather_phenomena_code_6 = self.additional_data[idx + 8:idx + 9]
                # PRESENT-WEATHER-OBSERVATION combination indicator code
                self.present_weather_observation_combination_indicator_code_6 = self.additional_data[idx + 9:idx + 10]
                # PRESENT-WEATHER-OBSERVATION quality code
                self.present_weather_observation_quality_code_6 = self.additional_data[idx + 10:idx + 11]

                idx += 11

            elif code.startswith("AU7"):
                # PRESENT-WEATHER-OBSERVATION intensity, fields 1 1 2 1 1 1 1 = 8
                # PRESENT-WEATHER-OBSERVATION intensity and proximity code
                self.present_weather_observation_intensity_and_proximity_code_7 = self.additional_data[idx + 3:idx + 4]
                # PRESENT-WEATHER-OBSERVATION descriptor code
                self.present_weather_observation_descriptor_code_7 = self.additional_data[idx + 4:idx + 5]
                # PRESENT-WEATHER-OBSERVATION precipitation code
                self.present_weather_observation_precipitation_code_7 = self.additional_data[idx + 5:idx + 7]
                # PRESENT-WEATHER-OBSERVATION obscuration code
                self.present_weather_observation_obscuration_code_7 = self.additional_data[idx + 7:idx + 8]
                # PRESENT-WEATHER-OBSERVATION other weather phenomena code
                self.present_weather_observation_other_weather_phenomena_code_7 = self.additional_data[idx + 8:idx + 9]
                # PRESENT-WEATHER-OBSERVATION combination indicator code
                self.present_weather_observation_combination_indicator_code_7 = self.additional_data[idx + 9:idx + 10]
                # PRESENT-WEATHER-OBSERVATION quality code
                self.present_weather_observation_quality_code_7 = self.additional_data[idx + 10:idx + 11]

                idx += 11

            elif code.startswith("AU8"):
                # PRESENT-WEATHER-OBSERVATION intensity, fields 1 1 2 1 1 1 1 = 8
                # PRESENT-WEATHER-OBSERVATION intensity and proximity code
                self.present_weather_observation_intensity_and_proximity_code_8 = self.additional_data[idx + 3:idx + 4]
                # PRESENT-WEATHER-OBSERVATION descriptor code
                self.present_weather_observation_descriptor_code_8 = self.additional_data[idx + 4:idx + 5]
                # PRESENT-WEATHER-OBSERVATION precipitation code
                self.present_weather_observation_precipitation_code_8 = self.additional_data[idx + 5:idx + 7]
                # PRESENT-WEATHER-OBSERVATION obscuration code
                self.present_weather_observation_obscuration_code_8 = self.additional_data[idx + 7:idx + 8]
                # PRESENT-WEATHER-OBSERVATION other weather phenomena code
                self.present_weather_observation_other_weather_phenomena_code_8 = self.additional_data[idx + 8:idx + 9]
                # PRESENT-WEATHER-OBSERVATION combination indicator code
                self.present_weather_observation_combination_indicator_code_8 = self.additional_data[idx + 9:idx + 10]
                # PRESENT-WEATHER-OBSERVATION quality code
                self.present_weather_observation_quality_code_8 = self.additional_data[idx + 10:idx + 11]

                idx += 11

            elif code.startswith("AU9"):
                # PRESENT-WEATHER-OBSERVATION intensity, fields 1 1 2 1 1 1 1 = 8
                # PRESENT-WEATHER-OBSERVATION intensity and proximity code
                self.present_weather_observation_intensity_and_proximity_code_9 = self.additional_data[idx + 3:idx + 4]
                # PRESENT-WEATHER-OBSERVATION descriptor code
                self.present_weather_observation_descriptor_code_9 = self.additional_data[idx + 4:idx + 5]
                # PRESENT-WEATHER-OBSERVATION precipitation code
                self.present_weather_observation_precipitation_code_9 = self.additional_data[idx + 5:idx + 7]
                # PRESENT-WEATHER-OBSERVATION obscuration code
                self.present_weather_observation_obscuration_code_9 = self.additional_data[idx + 7:idx + 8]
                # PRESENT-WEATHER-OBSERVATION other weather phenomena code
                self.present_weather_observation_other_weather_phenomena_code_9 = self.additional_data[idx + 8:idx + 9]
                # PRESENT-WEATHER-OBSERVATION combination indicator code
                self.present_weather_observation_combination_indicator_code_9 = self.additional_data[idx + 9:idx + 10]
                # PRESENT-WEATHER-OBSERVATION quality code
                self.present_weather_observation_quality_code_9 = self.additional_data[idx + 10:idx + 11]

                idx += 11

            elif code.startswith("AW1"):
                # PRESENT-WEATHER-OBSERVATION automated occurrence, fields 2 1
                # PRESENT-WEATHER-OBSERVATION automated atmospheric condition code
                self.present_weather_observation_automated_atmospheric_condition_code_1 = self.additional_data[idx + 3:idx + 5]
                # PRESENT-WEATHER-OBSERVATION quality automated atmospheric condition code
                self.present_weather_observation_quality_automated_atmospheric_condition_code_1 = self.additional_data[idx + 5:idx + 6]

                idx += 6

            elif code.startswith("AW2"):
                # PRESENT-WEATHER-OBSERVATION automated occurrence, fields 2 1
                # PRESENT-WEATHER-OBSERVATION automated atmospheric condition code
                self.present_weather_observation_automated_atmospheric_condition_code_2 = self.additional_data[idx + 3:idx + 5]
                # PRESENT-WEATHER-OBSERVATION quality automated atmospheric condition code
                self.present_weather_observation_quality_automated_atmospheric_condition_code_2 = self.additional_data[idx + 5:idx + 6]

                idx += 6

            elif code.startswith("AW3"):
                # PRESENT-WEATHER-OBSERVATION automated occurrence, fields 2 1
                # PRESENT-WEATHER-OBSERVATION automated atmospheric condition code
                self.present_weather_observation_automated_atmospheric_condition_code_3 = self.additional_data[idx + 3:idx + 5]
                # PRESENT-WEATHER-OBSERVATION quality automated atmospheric condition code
                self.present_weather_observation_quality_automated_atmospheric_condition_code_3 = self.additional_data[idx + 5:idx + 6]

                idx += 6

            elif code.startswith("AW4"):
                # PRESENT-WEATHER-OBSERVATION automated occurrence, fields 2 1
                # PRESENT-WEATHER-OBSERVATION automated atmospheric condition code
                self.present_weather_observation_automated_atmospheric_condition_code_4 = self.additional_data[idx + 3:idx + 5]
                # PRESENT-WEATHER-OBSERVATION quality automated atmospheric condition code
                self.present_weather_observation_quality_automated_atmospheric_condition_code_4 = self.additional_data[idx + 5:idx + 6]

                idx += 6

            elif code.startswith("AW5"):
                # PRESENT-WEATHER-OBSERVATION automated occurrence, fields 2 1
                # PRESENT-WEATHER-OBSERVATION automated atmospheric condition code
                self.present_weather_observation_automated_atmospheric_condition_code_5 = self.additional_data[idx + 3:idx + 5]
                # PRESENT-WEATHER-OBSERVATION quality automated atmospheric condition code
                self.present_weather_observation_quality_automated_atmospheric_condition_code_5 = self.additional_data[idx + 5:idx + 6]

                idx += 6

            elif code.startswith("AW6"):
                # PRESENT-WEATHER-OBSERVATION automated occurrence, fields 2 1
                # PRESENT-WEATHER-OBSERVATION automated atmospheric condition code
                self.present_weather_observation_automated_atmospheric_condition_code_6 = self.additional_data[idx + 3:idx + 5]
                # PRESENT-WEATHER-OBSERVATION quality automated atmospheric condition code
                self.present_weather_observation_quality_automated_atmospheric_condition_code_6 = self.additional_data[idx + 5:idx + 6]

                idx += 6

            elif code.startswith("AX1"):
                # PAST-WEATHER-OBSERVATION summary of day occurrence identifier, fields 2 1 2 1
                # PAST-WEATHER-OBSERVATION atmospheric condition code
                self.past_weather_observation_atmospheric_condition_code_1 = self.additional_data[idx + 3:idx + 5]
                # PAST-WEATHER-OBSERVATION quality manual atmospheric condition code
                self.past_weather_observation_quality_manual_atmospheric_condition_code_1 = self.additional_data[idx + 5:idx + 6]
                # PAST-WEATHER-OBSERVATION period quantity
                self.past_weather_observation_period_quantity_1 = self.additional_data[idx + 6:idx + 8]
                # PAST-WEATHER-OBSERVATION period quality code
                self.past_weather_observation_period_quality_code_1 = self.additional_data[idx + 8:idx + 9]

                idx += 9

            elif code.startswith("AX2"):
                # PAST-WEATHER-OBSERVATION summary of day occurrence identifier, fields 2 1 2 1
                # PAST-WEATHER-OBSERVATION atmospheric condition code
                self.past_weather_observation_atmospheric_condition_code_2 = self.additional_data[idx + 3:idx + 5]
                # PAST-WEATHER-OBSERVATION quality manual atmospheric condition code
                self.past_weather_observation_quality_manual_atmospheric_condition_code_2 = self.additional_data[idx + 5:idx + 6]
                # PAST-WEATHER-OBSERVATION period quantity
                self.past_weather_observation_period_quantity_2 = self.additional_data[idx + 6:idx + 8]
                # PAST-WEATHER-OBSERVATION period quality code
                self.past_weather_observation_period_quality_code_2 = self.additional_data[idx + 8:idx + 9]

                idx += 9

            elif code.startswith("AX3"):
                # PAST-WEATHER-OBSERVATION summary of day occurrence identifier, fields 2 1 2 1
                # PAST-WEATHER-OBSERVATION atmospheric condition code
                self.past_weather_observation_atmospheric_condition_code_3 = self.additional_data[idx + 3:idx + 5]
                # PAST-WEATHER-OBSERVATION quality manual atmospheric condition code
                self.past_weather_observation_quality_manual_atmospheric_condition_code_3 = self.additional_data[idx + 5:idx + 6]
                # PAST-WEATHER-OBSERVATION period quantity
                self.past_weather_observation_period_quantity_3 = self.additional_data[idx + 6:idx + 8]
                # PAST-WEATHER-OBSERVATION period quality code
                self.past_weather_observation_period_quality_code_3 = self.additional_data[idx + 8:idx + 9]

                idx += 9

            elif code.startswith("AX4"):
                # PAST-WEATHER-OBSERVATION summary of day occurrence identifier, fields 2 1 2 1
                # PAST-WEATHER-OBSERVATION atmospheric condition code
                self.past_weather_observation_atmospheric_condition_code_4 = self.additional_data[idx + 3:idx + 5]
                # PAST-WEATHER-OBSERVATION quality manual atmospheric condition code
                self.past_weather_observation_quality_manual_atmospheric_condition_code_4 = self.additional_data[idx + 5:idx + 6]
                # PAST-WEATHER-OBSERVATION period quantity
                self.past_weather_observation_period_quantity_4 = self.additional_data[idx + 6:idx + 8]
                # PAST-WEATHER-OBSERVATION period quality code
                self.past_weather_observation_period_quality_code_4 = self.additional_data[idx + 8:idx + 9]

                idx += 9

            elif code.startswith("AX5"):
                # PAST-WEATHER-OBSERVATION summary of day occurrence identifier, fields 2 1 2 1
                # PAST-WEATHER-OBSERVATION atmospheric condition code
                self.past_weather_observation_atmospheric_condition_code_5 = self.additional_data[idx + 3:idx + 5]
                # PAST-WEATHER-OBSERVATION quality manual atmospheric condition code
                self.past_weather_observation_quality_manual_atmospheric_condition_code_5 = self.additional_data[idx + 5:idx + 6]
                # PAST-WEATHER-OBSERVATION period quantity
                self.past_weather_observation_period_quantity_5 = self.additional_data[idx + 6:idx + 8]
                # PAST-WEATHER-OBSERVATION period quality code
                self.past_weather_observation_period_quality_code_5 = self.additional_data[idx + 8:idx + 9]

                idx += 9

            elif code.startswith("D01"):
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier, fields 6 1 6 3 6 1 6
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text = self.additional_data[idx + 3:idx + 9]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY reason code
                self.original_observation_element_quality_reason_code = self.additional_data[idx + 9:idx + 10]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code = self.additional_data[idx + 10:idx + 16]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier
                self.original_observation_element_quality_identifier = self.additional_data[idx + 16:idx + 19]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text_2 = self.additional_data[idx + 19:idx + 25]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY units code
                self.original_observation_element_quality_units_code = self.additional_data[idx + 25:idx + 26]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code_2 = self.additional_data[idx + 26:idx + 32]

                idx += 32

            elif code.startswith("D02"):
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier, fields 6 1 6 3 6 1 6
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text = self.additional_data[idx + 3:idx + 9]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY reason code
                self.original_observation_element_quality_reason_code = self.additional_data[idx + 9:idx + 10]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code = self.additional_data[idx + 10:idx + 16]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier
                self.original_observation_element_quality_identifier = self.additional_data[idx + 16:idx + 19]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text_2 = self.additional_data[idx + 19:idx + 25]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY units code
                self.original_observation_element_quality_units_code = self.additional_data[idx + 25:idx + 26]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code_2 = self.additional_data[idx + 26:idx + 32]

                idx += 32


            elif code.startswith("ED1"):
                # RUNWAY-VISUAL-RANGE-OBSERVATION, fields 2 1 4 1 = 8
                # RUNWAY-VISUAL-RANGE-OBSERVATION direction angle
                self.runway_visual_range_observation_direction_angle = self.additional_data[idx + 3:idx + 5]
                # RUNWAY-VISUAL-RANGE-OBSERVATION runway designator code
                self.runway_visual_range_observation_runway_designator_code = self.additional_data[idx + 5:idx + 6]
                # RUNWAY-VISUAL-RANGE-OBSERVATION visibility dimension
                self.runway_visual_range_observation_visibility_dimension = self.additional_data[idx + 6:idx + 10]
                # RUNWAY-VISUAL-RANGE-OBSERVATION quality code
                self.runway_visual_range_observation_quality_code = self.additional_data[idx + 10:idx + 11]

                idx += 11

            elif code.startswith("EQD"):
                # GEOPHYSICAL-POINT-OBSERVATION quality data, fields 3 6 1 6 3 6 1 6
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier
                self.original_observation_element_quality_identifier = self.additional_data[idx + 3:idx + 6]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text = self.additional_data[idx + 6:idx + 12]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY reason code
                self.original_observation_element_quality_reason_code = self.additional_data[idx + 12:idx + 13]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code = self.additional_data[idx + 13:idx + 19]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier
                self.original_observation_element_quality_identifier_2 = self.additional_data[idx + 19:idx + 22]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text_2 = self.additional_data[idx + 22:idx + 28]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY units code
                self.original_observation_element_quality_units_code = self.additional_data[idx + 28:idx + 29]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code_2 = self.additional_data[idx + 29:idx + 35]

                idx += 35

            elif code.startswith("KB1"):
                # AVERAGE-AIR-TEMPERATURE identifier, fields 3 1 5 1 = 10
                # AVERAGE-AIR-TEMPERATURE period quantity
                self.average_air_temperature_period_quantity_1 = self.additional_data[idx + 3:idx + 6]
                # AVERAGE-AIR-TEMPERATURE code
                self.average_air_temperature_code_1 = self.additional_data[idx + 6:idx + 7]
                # AVERAGE-AIR-TEMPERATURE temperature
                self.average_air_temperature_temperature_1 = self.additional_data[idx + 7:idx + 12]
                # AVERAGE-AIR-TEMPERATURE temperature quality code
                self.average_air_temperature_temperature_quality_code_1 = self.additional_data[idx + 12:idx + 13]

                idx += 13

            elif code.startswith("KB2"):
                # AVERAGE-AIR-TEMPERATURE identifier, fields 3 1 5 1 = 10
                # AVERAGE-AIR-TEMPERATURE period quantity
                self.average_air_temperature_period_quantity_2 = self.additional_data[idx + 3:idx + 6]
                # AVERAGE-AIR-TEMPERATURE code
                self.average_air_temperature_code_2 = self.additional_data[idx + 6:idx + 7]
                # AVERAGE-AIR-TEMPERATURE temperature
                self.average_air_temperature_temperature_2 = self.additional_data[idx + 7:idx + 12]
                # AVERAGE-AIR-TEMPERATURE temperature quality code
                self.average_air_temperature_temperature_quality_code_2 = self.additional_data[idx + 12:idx + 13]

                idx += 13

            elif code.startswith("KB3"):
                # AVERAGE-AIR-TEMPERATURE identifier, fields 3 1 5 1 = 10
                # AVERAGE-AIR-TEMPERATURE period quantity
                self.average_air_temperature_period_quantity_3 = self.additional_data[idx + 3:idx + 6]
                # AVERAGE-AIR-TEMPERATURE code
                self.average_air_temperature_code_3 = self.additional_data[idx + 6:idx + 7]
                # AVERAGE-AIR-TEMPERATURE temperature
                self.average_air_temperature_temperature_3 = self.additional_data[idx + 7:idx + 12]
                # AVERAGE-AIR-TEMPERATURE temperature quality code
                self.average_air_temperature_temperature_quality_code_3 = self.additional_data[idx + 12:idx + 13]

                idx += 13

            elif code.startswith("KC1"):
                # EXTREME AIR-TEMPERATURE FOR THE MONTH identifier, fields 1 1 5 6 1 = 14
                # EXTREME AIR-TEMPERATURE FOR THE MONTH code
                self.extreme_air_temperature_for_the_month_code_1 = self.additional_data[idx + 3:idx + 4]
                # EXTREME AIR-TEMPERATURE FOR THE MONTH condition code
                self.extreme_air_temperature_for_the_month_condition_code_1 = self.additional_data[idx + 4:idx + 5]
                # EXTREME AIR-TEMPERATURE FOR THE MONTH temperature
                self.extreme_air_temperature_for_the_month_temperature_1 = self.additional_data[idx + 5:idx + 10]
                # EXTREME AIR-TEMPERATURE FOR THE MONTH dates of occurrence
                self.extreme_air_temperature_for_the_month_dates_of_occurrence_1 = self.additional_data[idx + 10:idx + 16]
                # EXTREME AIR-TEMPERATURE FOR THE MONTH temperature quality code
                self.extreme_air_temperature_for_the_month_temperature_quality_code_1 = self.additional_data[idx + 16:idx + 17]


                idx += 17

            elif code.startswith("KC2"):
                # EXTREME AIR-TEMPERATURE FOR THE MONTH identifier, fields 1 1 5 6 1 = 14
                # EXTREME AIR-TEMPERATURE FOR THE MONTH code
                self.extreme_air_temperature_for_the_month_code_2 = self.additional_data[idx + 3:idx + 4]
                # EXTREME AIR-TEMPERATURE FOR THE MONTH condition code
                self.extreme_air_temperature_for_the_month_condition_code_2 = self.additional_data[idx + 4:idx + 5]
                # EXTREME AIR-TEMPERATURE FOR THE MONTH temperature
                self.extreme_air_temperature_for_the_month_temperature_2 = self.additional_data[idx + 5:idx + 10]
                # EXTREME AIR-TEMPERATURE FOR THE MONTH dates of occurrence
                self.extreme_air_temperature_for_the_month_dates_of_occurrence_2 = self.additional_data[idx + 10:idx + 16]
                # EXTREME AIR-TEMPERATURE FOR THE MONTH temperature quality code
                self.extreme_air_temperature_for_the_month_temperature_quality_code_2 = self.additional_data[idx + 16:idx + 17]

                idx += 17

            elif code.startswith("KE1"):
                # EXTREME TEMPERATURES, NUMBER OF DAYS EXCEEDING CRITERIA, FOR THE MONTH identifier, fields 2 1 2 1 2 1 2 1 = 12
                # EXTREME TEMPERATURE, NUMBER OF DAYS with maximum temperature 32 F or lower
                self.extreme_temperature_number_of_days_with_maximum_temperature_32_f_or_lower = self.additional_data[idx + 3:idx + 5]
                # EXTREME TEMPERATURE, NUMBER OF DAYS with maximum temperature 32 F or lower quality code
                self.extreme_temperature_number_of_days_with_maximum_temperature_32_f_or_lower_quality_code = self.additional_data[idx + 5:idx + 6]
                # EXTREME TEMPERATURE, NUMBER OF DAYS with maximum temperature 90 F or higher
                self.extreme_temperature_number_of_days_with_maximum_temperature_90_f_or_higher = self.additional_data[idx + 6:idx + 8]
                # EXTREME TEMPERATURE, NUMBER OF DAYS with maximum temperature 90 F or higher quality code
                self.extreme_temperature_number_of_days_with_maximum_temperature_90_f_or_higher_quality_code = self.additional_data[idx + 8:idx + 9]
                # EXTREME TEMPERATURE, NUMBER OF DAYS with minimum temperature 32 F or lower
                self.extreme_temperature_number_of_days_with_minimum_temperature_32_f_or_lower = self.additional_data[idx + 9:idx + 11]
                # EXTREME TEMPERATURE, NUMBER OF DAYS with minimum temperature 32 F or lower quality code
                self.extreme_temperature_number_of_days_with_minimum_temperature_32_f_or_lower_quality_code = self.additional_data[idx + 11:idx + 12]
                # EXTREME TEMPERATURE, NUMBER OF DAYS with minimum temperature 0 F or lower
                self.extreme_temperature_number_of_days_with_minimum_temperature_0_f_or_lower = self.additional_data[idx + 12:idx + 14]
                # EXTREME TEMPERATURE, NUMBER OF DAYS with minimum temperature 0 F or lower quality code
                self.extreme_temperature_number_of_days_with_minimum_temperature_0_f_or_lower_quality_code = self.additional_data[idx + 14:idx + 15]

                idx += 15

            elif code.startswith("GA"):
                # Sky cover layer, fields are 2 1 6 1 2 1 = 13
                self.sky_cover_layer_coverage_code = self.additional_data[idx + 3:idx + 5]
                self.sky_cover_layer_coverage_quality_code = self.additional_data[idx + 5:idx + 6]
                self.sky_cover_layer_base_height_dimension = self.additional_data[idx + 6:idx + 12]
                self.sky_cover_layer_base_height_quality_code = self.additional_data[idx + 12:idx + 13]
                self.sky_cover_layer_cloud_type_code = self.additional_data[idx + 13:idx + 15]
                self.sky_cover_layer_cloud_type_quality_code = self.additional_data[idx + 15:idx + 16]
                idx += 16

            elif code.startswith("GD1"):
                # SKY-COVER-SUMMATION-STATE, fields 1 2 1 6 1 1 = 12
                # SKY-COVER-SUMMATION-STATE coverage code
                self.sky_cover_summation_state_coverage_code_1 = self.additional_data[idx + 3:idx + 4]
                # SKY-COVER-SUMMATION coverage code #2
                self.sky_cover_summation_coverage_code_2_1 = self.additional_data[idx + 4:idx + 6]
                # SKY-COVER-SUMMATION-STATE coverage quality code
                self.sky_cover_summation_state_coverage_quality_code_1 = self.additional_data[idx + 6:idx + 7]
                # SKY-COVER-SUMMATION-STATE height dimension
                self.sky_cover_summation_state_height_dimension_1 = self.additional_data[idx + 7:idx + 13]
                # SKY-COVER-SUMMATION-STATE height dimension quality code
                self.sky_cover_summation_state_height_dimension_quality_code_1 = self.additional_data[idx + 13:idx + 14]
                # SKY-COVER-SUMMATION-STATE characteristic code
                self.sky_cover_summation_state_characteristic_code_1 = self.additional_data[idx + 14:idx + 15]

                idx += 15

            elif code.startswith("GD2"):
                # SKY-COVER-SUMMATION-STATE, fields 1 2 1 6 1 1 = 12
                # SKY-COVER-SUMMATION-STATE coverage code
                self.sky_cover_summation_state_coverage_code_2 = self.additional_data[idx + 3:idx + 4]
                # SKY-COVER-SUMMATION coverage code #2
                self.sky_cover_summation_coverage_code_2_2 = self.additional_data[idx + 4:idx + 6]
                # SKY-COVER-SUMMATION-STATE coverage quality code
                self.sky_cover_summation_state_coverage_quality_code_2 = self.additional_data[idx + 6:idx + 7]
                # SKY-COVER-SUMMATION-STATE height dimension
                self.sky_cover_summation_state_height_dimension_2 = self.additional_data[idx + 7:idx + 13]
                # SKY-COVER-SUMMATION-STATE height dimension quality code
                self.sky_cover_summation_state_height_dimension_quality_code_2 = self.additional_data[idx + 13:idx + 14]
                # SKY-COVER-SUMMATION-STATE characteristic code
                self.sky_cover_summation_state_characteristic_code_2 = self.additional_data[idx + 14:idx + 15]

                idx += 15

            elif code.startswith("GD3"):
                # SKY-COVER-SUMMATION-STATE, fields 1 2 1 6 1 1 = 12
                # SKY-COVER-SUMMATION-STATE coverage code
                self.sky_cover_summation_state_coverage_code_3 = self.additional_data[idx + 3:idx + 4]
                # SKY-COVER-SUMMATION coverage code #2
                self.sky_cover_summation_coverage_code_2_3 = self.additional_data[idx + 4:idx + 6]
                # SKY-COVER-SUMMATION-STATE coverage quality code
                self.sky_cover_summation_state_coverage_quality_code_3 = self.additional_data[idx + 6:idx + 7]
                # SKY-COVER-SUMMATION-STATE height dimension
                self.sky_cover_summation_state_height_dimension_3 = self.additional_data[idx + 7:idx + 13]
                # SKY-COVER-SUMMATION-STATE height dimension quality code
                self.sky_cover_summation_state_height_dimension_quality_code_3 = self.additional_data[idx + 13:idx + 14]
                # SKY-COVER-SUMMATION-STATE characteristic code
                self.sky_cover_summation_state_characteristic_code_3 = self.additional_data[idx + 14:idx + 15]

                idx += 15

            elif code.startswith("GD4"):
                # SKY-COVER-SUMMATION-STATE, fields 1 2 1 6 1 1 = 12
                # SKY-COVER-SUMMATION-STATE coverage code
                self.sky_cover_summation_state_coverage_code_4 = self.additional_data[idx + 3:idx + 4]
                # SKY-COVER-SUMMATION coverage code #2
                self.sky_cover_summation_coverage_code_2_4 = self.additional_data[idx + 4:idx + 6]
                # SKY-COVER-SUMMATION-STATE coverage quality code
                self.sky_cover_summation_state_coverage_quality_code_4 = self.additional_data[idx + 6:idx + 7]
                # SKY-COVER-SUMMATION-STATE height dimension
                self.sky_cover_summation_state_height_dimension_4 = self.additional_data[idx + 7:idx + 13]
                # SKY-COVER-SUMMATION-STATE height dimension quality code
                self.sky_cover_summation_state_height_dimension_quality_code_4 = self.additional_data[idx + 13:idx + 14]
                # SKY-COVER-SUMMATION-STATE characteristic code
                self.sky_cover_summation_state_characteristic_code_4 = self.additional_data[idx + 14:idx + 15]

                idx += 15

            elif code.startswith("GE1"):
                # Sky condition observation, fields are 1 6 6 6
                self.sky_condition_observation_convective_cloud_attribute = self.additional_data[idx + 3:idx + 4]
                # SKY-CONDITION-OBSERVATION vertical datum attribute
                self.sky_condition_observation_vertical_datum_attribute = self.additional_data[idx + 4:idx + 10]
                # SKY-CONDITION-OBSERVATION base height upper range attribute
                self.sky_condition_observation_base_height_upper_range_attribute = self.additional_data[idx + 10:idx + 16]
                # SKY-CONDITION-OBSERVATION base height lower range attribute
                self.sky_condition_observation_base_height_lower_range_attribute = self.additional_data[idx + 16:idx + 22]
                idx += 22

            elif code.startswith("GF1"):
                # Sky condition observation, fields are 2 2 1 2 1 2 1 5 1 2 1 2 1 = 23
                # SKY-CONDITION-OBSERVATION total coverage code
                self.sky_condition_observation_total_coverage_code = self.additional_data[idx + 3:idx + 5]
                # SKY-CONDITION-OBSERVATION total opaque coverage code
                self.sky_condition_observation_total_opaque_coverage_code = self.additional_data[idx + 5:idx + 7]
                # SKY-CONDITION-OBSERVATION quality total coverage code
                self.sky_condition_observation_quality_total_coverage_code = self.additional_data[idx + 7:idx + 8]
                # SKY-CONDITION-OBSERVATION total lowest cloud cover code
                self.sky_condition_observation_total_lowest_cloud_cover_code = self.additional_data[idx + 8:idx + 10]
                # SKY-CONDITION-OBSERVATION quality total lowest cloud cover code
                self.sky_condition_observation_quality_total_lowest_cloud_cover_code = self.additional_data[idx + 10:idx + 11]
                # SKY-CONDITION-OBSERVATION low cloud genus code
                self.sky_condition_observation_low_cloud_genus_code = self.additional_data[idx + 11:idx + 13]
                # SKY-CONDITION-OBSERVATION quality low cloud genus code
                self.sky_condition_observation_quality_low_cloud_genus_code = self.additional_data[idx + 13:idx + 14]
                # SKY-CONDITION-OBSERVATION lowest cloud base height dimension
                self.sky_condition_observation_lowest_cloud_base_height_dimension = self.additional_data[idx + 14:idx + 19]
                # SKY-CONDITION-OBSERVATION lowest cloud base height quality code
                self.sky_condition_observation_lowest_cloud_base_height_quality_code = self.additional_data[idx + 19:idx + 20]
                # SKY-CONDITION-OBSERVATION mid cloud genus code
                self.sky_condition_observation_mid_cloud_genus_code = self.additional_data[idx + 20:idx + 22]
                # SKY-CONDITION-OBSERVATION quality mid cloud genus code
                self.sky_condition_observation_quality_mid_cloud_genus_code = self.additional_data[idx + 22:idx + 23]
                # SKY-CONDITION-OBSERVATION high cloud genus code
                self.sky_condition_observation_high_cloud_genus_code = self.additional_data[idx + 23:idx + 25]
                # SKY-CONDITION-OBSERVATION quality high cloud genus code
                self.sky_condition_observation_quality_high_cloud_genus_code = self.additional_data[idx + 25:idx + 26]
                idx += 26

            elif code.startswith("GK1"):
                # SUNSHINE-OBSERVATION identifier
                # fields are 3 1 = 4
                # SUNSHINE-OBSERVATION percent of possible sunshine quantity
                self.sunshine_observation_percent_of_possible_sunshine_quantity = self.additional_data[idx + 3:idx + 6]
                # SUNSHINE-OBSERVATION percent of possible sunshine quality code
                self.sunshine_observation_percent_of_possible_sunshine_quality_code = self.additional_data[idx + 6:idx + 7]
                idx += 7

            elif code.startswith("KA1"):
                # Extreme air temperature, fields 3 1 5 1 = 10
                # EXTREME-AIR-TEMPERATURE period quantity
                self.extreme_air_temperature_period_quantity = self.additional_data[idx + 3:idx + 6]
                # EXTREME-AIR-TEMPERATURE code
                self.extreme_air_temperature_code = self.additional_data[idx + 6:idx + 7]
                # EXTREME-AIR-TEMPERATURE temperature
                self.extreme_air_temperature_temperature = self.additional_data[idx + 7:idx + 12]
                # EXTREME-AIR-TEMPERATURE temperature quality code
                self.extreme_air_temperature_temperature_quality_code = self.additional_data[idx + 12:idx + 13]

                idx += 13

            elif code.startswith("KA2"):
                # Extreme air temperature, fields 3 1 5 1 = 10
                # EXTREME-AIR-TEMPERATURE period quantity
                self.extreme_air_temperature_period_quantity_2 = self.additional_data[idx + 3:idx + 6]
                # EXTREME-AIR-TEMPERATURE code
                self.extreme_air_temperature_code_2 = self.additional_data[idx + 6:idx + 7]
                # EXTREME-AIR-TEMPERATURE temperature
                self.extreme_air_temperature_temperature_2 = self.additional_data[idx + 7:idx + 12]
                # EXTREME-AIR-TEMPERATURE temperature quality code
                self.extreme_air_temperature_temperature_quality_code_2 = self.additional_data[idx + 12:idx + 13]

                idx += 13

            elif code.startswith("KA3"):
                # Extreme air temperature, fields 3 1 5 1 = 10
                # EXTREME-AIR-TEMPERATURE period quantity
                self.extreme_air_temperature_period_quantity_3 = self.additional_data[idx + 3:idx + 6]
                # EXTREME-AIR-TEMPERATURE code
                self.extreme_air_temperature_code_3 = self.additional_data[idx + 6:idx + 7]
                # EXTREME-AIR-TEMPERATURE temperature
                self.extreme_air_temperature_temperature_3 = self.additional_data[idx + 7:idx + 12]
                # EXTREME-AIR-TEMPERATURE temperature quality code
                self.extreme_air_temperature_temperature_quality_code_3 = self.additional_data[idx + 12:idx + 13]

                idx += 13

            elif code.startswith("KA4"):
                # Extreme air temperature, fields 3 1 5 1 = 10
                # EXTREME-AIR-TEMPERATURE period quantity
                self.extreme_air_temperature_period_quantity_4 = self.additional_data[idx + 3:idx + 6]
                # EXTREME-AIR-TEMPERATURE code
                self.extreme_air_temperature_code_4 = self.additional_data[idx + 6:idx + 7]
                # EXTREME-AIR-TEMPERATURE temperature
                self.extreme_air_temperature_temperature_4 = self.additional_data[idx + 7:idx + 12]
                # EXTREME-AIR-TEMPERATURE temperature quality code
                self.extreme_air_temperature_temperature_quality_code_4 = self.additional_data[idx + 12:idx + 13]

                idx += 13

            elif code.startswith("KD1"):
                # HEATING-COOLING-DEGREE-DAYS identifier, fields 3 1 4 1 = 9
                # HEATING-COOLING-DEGREE-DAYS period quantity
                self.heating_cooling_degree_days_period_quantity_1 = self.additional_data[idx + 3:idx + 6]
                # HEATING-COOLING-DEGREE-DAYS code
                self.heating_cooling_degree_days_code_1 = self.additional_data[idx + 6:idx + 7]
                # HEATING-COOLING-DEGREE-DAYS value
                self.heating_cooling_degree_days_value_1 = self.additional_data[idx + 7:idx + 11]
                # HEATING-COOLING-DEGREE-DAYS quality code
                self.heating_cooling_degree_days_quality_code_1 = self.additional_data[idx + 11:idx + 12]

                idx += 12

            elif code.startswith("KD2"):
                # HEATING-COOLING-DEGREE-DAYS identifier, fields 3 1 4 1 = 9
                # HEATING-COOLING-DEGREE-DAYS period quantity
                self.heating_cooling_degree_days_period_quantity_2 = self.additional_data[idx + 3:idx + 6]
                # HEATING-COOLING-DEGREE-DAYS code
                self.heating_cooling_degree_days_code_2 = self.additional_data[idx + 6:idx + 7]
                # HEATING-COOLING-DEGREE-DAYS value
                self.heating_cooling_degree_days_value_2 = self.additional_data[idx + 7:idx + 11]
                # HEATING-COOLING-DEGREE-DAYS quality code
                self.heating_cooling_degree_days_quality_code_2 = self.additional_data[idx + 11:idx + 12]

                idx += 12


            elif code.startswith("KG1"):
                # AVERAGE DEW POINT AND WET BULB TEMPERATURE occurrence identifier, fields 3 1 5 1 1 = 11
                # AVERAGE-DEW-POINT-AND-WET-BULB-TEMPERATURE period quantity
                self.average_dew_point_and_wet_bulb_temperature_period_quantity_1 = self.additional_data[idx + 3:idx + 6]
                # AVERAGE-DEW-POINT-AND-WET-BULB-TEMPERATURE code
                self.average_dew_point_and_wet_bulb_temperature_code_1 = self.additional_data[idx + 6:idx + 7]
                # AVERAGE-DEW-POINT-AND-WET-BULB-TEMPERATURE temperature
                self.average_dew_point_and_wet_bulb_temperature_temperature_1 = self.additional_data[idx + 7:idx + 12]
                # AVERAGE-DEW-POINT-AND-WET-BULB-TEMPERATURE derived code
                self.average_dew_point_and_wet_bulb_temperature_derived_code_1 = self.additional_data[idx + 12:idx + 13]
                # AVERAGE-DEW-POINT-AND-WET-BULB-TEMPERATURE quality code
                self.average_dew_point_and_wet_bulb_temperature_quality_code_1 = self.additional_data[idx + 13:idx + 14]

                idx += 14

            elif code.startswith("KG2"):
                # AVERAGE DEW POINT AND WET BULB TEMPERATURE occurrence identifier, fields 3 1 5 1 1 = 11
                # AVERAGE-DEW-POINT-AND-WET-BULB-TEMPERATURE period quantity
                self.average_dew_point_and_wet_bulb_temperature_period_quantity_2 = self.additional_data[idx + 3:idx + 6]
                # AVERAGE-DEW-POINT-AND-WET-BULB-TEMPERATURE code
                self.average_dew_point_and_wet_bulb_temperature_code_2 = self.additional_data[idx + 6:idx + 7]
                # AVERAGE-DEW-POINT-AND-WET-BULB-TEMPERATURE temperature
                self.average_dew_point_and_wet_bulb_temperature_temperature_2 = self.additional_data[idx + 7:idx + 12]
                # AVERAGE-DEW-POINT-AND-WET-BULB-TEMPERATURE derived code
                self.average_dew_point_and_wet_bulb_temperature_derived_code_2 = self.additional_data[idx + 12:idx + 13]
                # AVERAGE-DEW-POINT-AND-WET-BULB-TEMPERATURE quality code
                self.average_dew_point_and_wet_bulb_temperature_quality_code_2 = self.additional_data[idx + 13:idx + 14]

                idx += 14

            elif code.startswith("MA1"):
                # ATMOSPHERIC-PRESSURE-OBSERVATION, fields 5 1 5 1 = 12
                # ATMOSPHERIC-PRESSURE-OBSERVATION altimeter setting rate
                self.atmospheric_pressure_observation_altimeter_setting_rate = self.additional_data[idx + 3:idx + 8]
                # ATMOSPHERIC-PRESSURE-OBSERVATION altimeter quality code
                self.atmospheric_pressure_observation_altimeter_quality_code = self.additional_data[idx + 8:idx + 9]
                # ATMOSPHERIC-PRESSURE-OBSERVATION station pressure rate
                self.atmospheric_pressure_observation_station_pressure_rate = self.additional_data[idx + 9:idx + 14]
                # ATMOSPHERIC-PRESSURE-OBSERVATION station pressure quality code
                self.atmospheric_pressure_observation_station_pressure_quality_code = self.additional_data[idx + 14:idx + 15]

                idx += 15

            elif code.startswith("MD1"):
                # ATMOSPHERIC-PRESSURE-CHANGE, fields 1 1 3 1 4 1 = 11
                # ATMOSPHERIC-PRESSURE-CHANGE tendency code
                self.atmospheric_pressure_change_tendency_code = self.additional_data[idx + 3:idx + 4]
                # ATMOSPHERIC-PRESSURE-CHANGE quality tendency code
                self.atmospheric_pressure_change_quality_tendency_code = self.additional_data[idx + 4:idx + 5]
                # ATMOSPHERIC-PRESSURE-CHANGE three hour quantity
                self.atmospheric_pressure_change_three_hour_quantity = self.additional_data[idx + 5:idx + 8]
                # ATMOSPHERIC-PRESSURE-CHANGE quality three hour code
                self.atmospheric_pressure_change_quality_three_hour_code = self.additional_data[idx + 8:idx + 9]
                # ATMOSPHERIC-PRESSURE-CHANGE twenty four hour quantity
                self.atmospheric_pressure_change_twenty_four_hour_quantity = self.additional_data[idx + 9:idx + 13]
                # ATMOSPHERIC-PRESSURE-CHANGE quality twenty four hour code
                self.atmospheric_pressure_change_quality_twenty_four_hour_code = self.additional_data[idx + 13:idx + 14]

                idx += 14

            elif code.startswith("MET"):
                # Remarks data section, fields 3 variable based on first field
                # GEOPHYSICAL-POINT-OBSERVATION remark length quantity
                self.geophysical_point_observation_remark_length_quantity = self.additional_data[idx + 3:idx + 6]

                remark_length = int(self.geophysical_point_observation_remark_length_quantity)

                # GEOPHYSICAL-POINT-OBSERVATION remark text
                self.geophysical_point_observation_remark_text = self.additional_data[idx + 6:idx + 6 + remark_length]

                idx += 6 + remark_length

            elif code.startswith("MF1"):
                # ATMOSPHERIC-PRESSURE-OBSERVATION (STP/SLP) occurrence identifier, fields 5 1 5 1 = 12
                # ATMOSPHERIC-PRESSURE-OBSERVATION (STP/SLP) average station pressure for the day
                self.atmospheric_pressure_observation_average_station_pressure_for_the_day = self.additional_data[idx + 3:idx + 8]
                # ATMOSPHERIC-PRESSURE-OBSERVATION (STP/SLP) quality code
                self.atmospheric_pressure_observation_quality_code = self.additional_data[idx + 8:idx + 9]
                # ATMOSPHERIC-PRESSURE-OBSERVATION (STP/SLP) average sea level pressure for the day
                self.atmospheric_pressure_observation_average_sea_level_pressure_for_the_day = self.additional_data[idx + 9:idx + 14]
                # ATMOSPHERIC-PRESSURE-OBSERVATION (STP/SLP) quality code
                self.atmospheric_pressure_observation_quality_code_2 = self.additional_data[idx + 14:idx + 15]

                idx += 15

            elif code.startswith("MG1"):
                # ATMOSPHERIC-PRESSURE-OBSERVATION for the day identifier, fields 5 1 5 1 = 12
                # ATMOSPHERIC-PRESSURE-OBSERVATION average station pressure for the day
                self.atmospheric_pressure_observation_average_station_pressure_for_the_day_2 = self.additional_data[idx + 3:idx + 8]
                # ATMOSPHERIC-PRESSURE-OBSERVATION average station pressure quality code
                self.atmospheric_pressure_observation_average_station_pressure_quality_code = self.additional_data[idx + 8:idx + 9]
                # ATMOSPHERIC-PRESSURE-OBSERVATION minimum sea level pressure for the day
                self.atmospheric_pressure_observation_minimum_sea_level_pressure_for_the_day = self.additional_data[idx + 9:idx + 14]
                # ATMOSPHERIC-PRESSURE-OBSERVATION minimum sea level pressure for the day quality code
                self.atmospheric_pressure_observation_minimum_sea_level_pressure_for_the_day_quality_code = self.additional_data[idx + 14:idx + 15]

                idx += 15

            elif code.startswith("MH1"):
                # ATMOSPHERIC-PRESSURE-OBSERVATION FOR THE MONTH identifier, fields 5 1 5 1 = 12
                # ATMOSPHERIC-PRESSURE-OBSERVATION FOR THE MONTH average station pressure for the month
                self.atmospheric_pressure_observation_for_the_month_average_station_pressure_for_the_month = self.additional_data[idx + 3:idx + 8]
                # ATMOSPHERIC-PRESSURE-OBSERVATION FOR THE MONTH average station pressure quality code
                self.atmospheric_pressure_observation_for_the_month_average_station_pressure_quality_code = self.additional_data[idx + 8:idx + 9]
                # ATMOSPHERIC-PRESSURE-OBSERVATION FOR THE MONTH average sea level pressure for the month
                self.atmospheric_pressure_observation_for_the_month_average_sea_level_pressure_for_the_month = self.additional_data[idx + 9:idx + 14]
                # ATMOSPHERIC-PRESSURE-OBSERVATION FOR THE MONTH average sea level pressure quality code
                self.atmospheric_pressure_observation_for_the_month_average_sea_level_pressure_quality_code = self.additional_data[idx + 14:idx + 15]

                idx += 15

            elif code.startswith("MK1"):
                # ATMOSPHERIC-PRESSURE-OBSERVATION FOR THE MONTH min/max identifier, fields 5 6 1 5 6 1 = 24
                # ATMOSPHERIC-PRESSURE-OBSERVATION FOR THE MONTH maximum sea level pressure for the month
                self.atmospheric_pressure_observation_for_the_month_maximum_sea_level_pressure_for_the_month = self.additional_data[idx + 3:idx + 8]
                # ATMOSPHERIC-PRESSURE-OBSERVATION FOR THE MONTH maximum sea level pressure, date-time
                self.atmospheric_pressure_observation_for_the_month_maximum_sea_level_pressure_date_time = self.additional_data[idx + 8:idx + 14]
                # ATMOSPHERIC-PRESSURE-OBSERVATION FOR THE MONTH maximum sea level pressure quality code
                self.atmospheric_pressure_observation_for_the_month_maximum_sea_level_pressure_quality_code = self.additional_data[idx + 14:idx + 15]
                # ATMOSPHERIC-PRESSURE-OBSERVATION FOR THE MONTH minimum sea level pressure for the month
                self.atmospheric_pressure_observation_for_the_month_minimum_sea_level_pressure_for_the_month = self.additional_data[idx + 15:idx + 20]
                # ATMOSPHERIC-PRESSURE-OBSERVATION FOR THE MONTH minimum sea level pressure, date-time
                self.atmospheric_pressure_observation_for_the_month_minimum_sea_level_pressure_date_time = self.additional_data[idx + 20:idx + 26]
                # ATMOSPHERIC-PRESSURE-OBSERVATION FOR THE MONTH minimum sea level pressure quality code
                self.atmospheric_pressure_observation_for_the_month_minimum_sea_level_pressure_quality_code = self.additional_data[idx + 26:idx + 27]

                idx += 27

            elif code.startswith("MV1"):
                # PRESENT-WEATHER-IN-VICINITY-OBSERVATION occurrence identifier, first weather reported, fields 2 1 = 3
                # PRESENT-WEATHER-IN-VICINITY-OBSERVATION atmospheric condition code
                self.present_weather_in_vicinity_observation_atmospheric_condition_code_1 = self.additional_data[idx + 3:idx + 5]
                # PRESENT-WEATHER-IN-VICINITY-OBSERVATION quality atmospheric condition code
                self.present_weather_in_vicinity_observation_quality_atmospheric_condition_code_1 = self.additional_data[idx + 5:idx + 6]

                idx += 6

            elif code.startswith("MV2"):
                # PRESENT-WEATHER-IN-VICINITY-OBSERVATION occurrence identifier, first weather reported, fields 2 1 = 3
                # PRESENT-WEATHER-IN-VICINITY-OBSERVATION atmospheric condition code
                self.present_weather_in_vicinity_observation_atmospheric_condition_code_2 = self.additional_data[idx + 3:idx + 5]
                # PRESENT-WEATHER-IN-VICINITY-OBSERVATION quality atmospheric condition code
                self.present_weather_in_vicinity_observation_quality_atmospheric_condition_code_2 = self.additional_data[idx + 5:idx + 6]

                idx += 6

            elif code.startswith("MW1"):
                # PRESENT-WEATHER-OBSERVATION manual occurrence, fields 2 1 = 3
                # PRESENT-WEATHER-OBSERVATION manual atmospheric condition code
                self.present_weather_observation_manual_atmospheric_condition_code_1 = self.additional_data[idx + 3:idx + 5]
                # PRESENT-WEATHER-OBSERVATION quality manual atmospheric condition code
                self.present_weather_observation_quality_manual_atmospheric_condition_code_1 = self.additional_data[idx + 5:idx + 6]

                idx += 6

            elif code.startswith("MW2"):
                # PRESENT-WEATHER-OBSERVATION manual occurrence, fields 2 1 = 3
                # PRESENT-WEATHER-OBSERVATION manual atmospheric condition code
                self.present_weather_observation_manual_atmospheric_condition_code_2 = self.additional_data[idx + 3:idx + 5]
                # PRESENT-WEATHER-OBSERVATION quality manual atmospheric condition code
                self.present_weather_observation_quality_manual_atmospheric_condition_code_2 = self.additional_data[idx + 5:idx + 6]

                idx += 6

            elif code.startswith("MW3"):
                # PRESENT-WEATHER-OBSERVATION manual occurrence, fields 2 1 = 3
                # PRESENT-WEATHER-OBSERVATION manual atmospheric condition code
                self.present_weather_observation_manual_atmospheric_condition_code_3 = self.additional_data[idx + 3:idx + 5]
                # PRESENT-WEATHER-OBSERVATION quality manual atmospheric condition code
                self.present_weather_observation_quality_manual_atmospheric_condition_code_3 = self.additional_data[idx + 5:idx + 6]

                idx += 6


            elif code.startswith("OC1"):
                # WIND-GUST-OBSERVATION identifier, fields 4 1
                # WIND-GUST-OBSERVATION speed rate
                self.wind_gust_observation_speed_rate = self.additional_data[idx + 3:idx + 7]
                # WIND-GUST-OBSERVATION quality code
                self.wind_gust_observation_quality_code = self.additional_data[idx + 7:idx + 8]

                idx += 8

            elif code.startswith("OD1"):
                # SUPPLEMENTARY-WIND-OBSERVATION identifier, fields 1 2 4 1 3 = 11
                # SUPPLEMENTARY-WIND-OBSERVATION type code
                self.supplementary_wind_observation_type_code = self.additional_data[idx + 3:idx + 4]
                # SUPPLEMENTARY-WIND-OBSERVATION period quantity
                self.supplementary_wind_observation_period_quantity = self.additional_data[idx + 4:idx + 6]
                # SUPPLEMENTARY-WIND-OBSERVATION speed rate
                self.supplementary_wind_observation_speed_rate = self.additional_data[idx + 6:idx + 10]
                # SUPPLEMENTARY-WIND-OBSERVATION speed rate quality code
                self.supplementary_wind_observation_speed_rate_quality_code = self.additional_data[idx + 10:idx + 11]
                # SUPPLEMENTARY-WIND-OBSERVATION direction quantity
                self.supplementary_wind_observation_direction_quantity = self.additional_data[idx + 11:idx + 14]

                idx += 14

            elif code.startswith("OE1"):
                # SUMMARY-OF-DAY-WIND-OBSERVATION identifier, fields 1 2 5 3 4 1 = 16
                # SUMMARY-OF-DAY-WIND-OBSERVATION type code
                self.summary_of_day_wind_observation_type_code_1 = self.additional_data[idx + 3:idx + 4]
                # SUMMARY-OF-DAY-WIND-OBSERVATION period quantity
                self.summary_of_day_wind_observation_period_quantity_1 = self.additional_data[idx + 4:idx + 6]
                # SUMMARY-OF-DAY-WIND-OBSERVATION speed
                self.summary_of_day_wind_observation_speed_1 = self.additional_data[idx + 6:idx + 11]
                # SUMMARY-OF-DAY-WIND-OBSERVATION direction of wind
                self.summary_of_day_wind_observation_direction_of_wind_1 = self.additional_data[idx + 11:idx + 14]
                # SUMMARY-OF-DAY-WIND-OBSERVATION time of occurrence in Z-time (UTC)
                self.summary_of_day_wind_observation_time_of_occurrence_in_z_time_utc_1 = self.additional_data[idx + 14:idx + 18]
                # SUMMARY-OF-DAY-WIND-OBSERVATION quality code
                self.summary_of_day_wind_observation_quality_code_1 = self.additional_data[idx + 18:idx + 19]

                idx += 19

            elif code.startswith("OE2"):
                # SUMMARY-OF-DAY-WIND-OBSERVATION identifier, fields 1 2 5 3 4 1 = 16
                # SUMMARY-OF-DAY-WIND-OBSERVATION type code
                self.summary_of_day_wind_observation_type_code_2 = self.additional_data[idx + 3:idx + 4]
                # SUMMARY-OF-DAY-WIND-OBSERVATION period quantity
                self.summary_of_day_wind_observation_period_quantity_2 = self.additional_data[idx + 4:idx + 6]
                # SUMMARY-OF-DAY-WIND-OBSERVATION speed
                self.summary_of_day_wind_observation_speed_2 = self.additional_data[idx + 6:idx + 11]
                # SUMMARY-OF-DAY-WIND-OBSERVATION direction of wind
                self.summary_of_day_wind_observation_direction_of_wind_2 = self.additional_data[idx + 11:idx + 14]
                # SUMMARY-OF-DAY-WIND-OBSERVATION time of occurrence in Z-time (UTC)
                self.summary_of_day_wind_observation_time_of_occurrence_in_z_time_utc_2 = self.additional_data[idx + 14:idx + 18]
                # SUMMARY-OF-DAY-WIND-OBSERVATION quality code
                self.summary_of_day_wind_observation_quality_code_2 = self.additional_data[idx + 18:idx + 19]

                idx += 19

            elif code.startswith("OE3"):
                # SUMMARY-OF-DAY-WIND-OBSERVATION identifier, fields 1 2 5 3 4 1 = 16
                # SUMMARY-OF-DAY-WIND-OBSERVATION type code
                self.summary_of_day_wind_observation_type_code_3 = self.additional_data[idx + 3:idx + 4]
                # SUMMARY-OF-DAY-WIND-OBSERVATION period quantity
                self.summary_of_day_wind_observation_period_quantity_3 = self.additional_data[idx + 4:idx + 6]
                # SUMMARY-OF-DAY-WIND-OBSERVATION speed
                self.summary_of_day_wind_observation_speed_3 = self.additional_data[idx + 6:idx + 11]
                # SUMMARY-OF-DAY-WIND-OBSERVATION direction of wind
                self.summary_of_day_wind_observation_direction_of_wind_3 = self.additional_data[idx + 11:idx + 14]
                # SUMMARY-OF-DAY-WIND-OBSERVATION time of occurrence in Z-time (UTC)
                self.summary_of_day_wind_observation_time_of_occurrence_in_z_time_utc_3 = self.additional_data[idx + 14:idx + 18]
                # SUMMARY-OF-DAY-WIND-OBSERVATION quality code
                self.summary_of_day_wind_observation_quality_code_3 = self.additional_data[idx + 18:idx + 19]

                idx += 19

            elif code.startswith("P0"):
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier, fields 6 1 6 3 6 1 6
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text = self.additional_data[idx + 3:idx + 9]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY reason code
                self.original_observation_element_quality_reason_code = self.additional_data[idx + 9:idx + 10]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code = self.additional_data[idx + 10:idx + 16]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier
                self.original_observation_element_quality_identifier = self.additional_data[idx + 16:idx + 19]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text_2 = self.additional_data[idx + 19:idx + 25]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY units code
                self.original_observation_element_quality_units_code = self.additional_data[idx + 25:idx + 26]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code_2 = self.additional_data[idx + 26:idx + 32]

                idx += 32

            elif code.startswith("Q01"):
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier, fields 6 1 6 3 6 1 6
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text = self.additional_data[idx + 3:idx + 9]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY reason code
                self.original_observation_element_quality_reason_code = self.additional_data[idx + 9:idx + 10]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code = self.additional_data[idx + 10:idx + 16]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier
                self.original_observation_element_quality_identifier = self.additional_data[idx + 16:idx + 19]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text_2 = self.additional_data[idx + 19:idx + 25]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY units code
                self.original_observation_element_quality_units_code = self.additional_data[idx + 25:idx + 26]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code_2 = self.additional_data[idx + 26:idx + 32]

                idx += 32

            elif code.startswith("Q02"):
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier, fields 6 1 6 3 6 1 6
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text = self.additional_data[idx + 3:idx + 9]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY reason code
                self.original_observation_element_quality_reason_code = self.additional_data[idx + 9:idx + 10]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code = self.additional_data[idx + 10:idx + 16]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier
                self.original_observation_element_quality_identifier = self.additional_data[idx + 16:idx + 19]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text_2 = self.additional_data[idx + 19:idx + 25]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY units code
                self.original_observation_element_quality_units_code = self.additional_data[idx + 25:idx + 26]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code_2 = self.additional_data[idx + 26:idx + 32]

                idx += 32

            elif code.startswith("Q03"):
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier, fields 6 1 6 3 6 1 6
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text = self.additional_data[idx + 3:idx + 9]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY reason code
                self.original_observation_element_quality_reason_code = self.additional_data[idx + 9:idx + 10]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code = self.additional_data[idx + 10:idx + 16]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier
                self.original_observation_element_quality_identifier = self.additional_data[idx + 16:idx + 19]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text_2 = self.additional_data[idx + 19:idx + 25]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY units code
                self.original_observation_element_quality_units_code = self.additional_data[idx + 25:idx + 26]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code_2 = self.additional_data[idx + 26:idx + 32]

                idx += 32

            elif code.startswith("Q04"):
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier, fields 6 1 6 3 6 1 6
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text = self.additional_data[idx + 3:idx + 9]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY reason code
                self.original_observation_element_quality_reason_code = self.additional_data[idx + 9:idx + 10]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code = self.additional_data[idx + 10:idx + 16]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier
                self.original_observation_element_quality_identifier = self.additional_data[idx + 16:idx + 19]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text_2 = self.additional_data[idx + 19:idx + 25]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY units code
                self.original_observation_element_quality_units_code = self.additional_data[idx + 25:idx + 26]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code_2 = self.additional_data[idx + 26:idx + 32]

                idx += 32

            elif code.startswith("Q05"):
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier, fields 6 1 6 3 6 1 6
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text = self.additional_data[idx + 3:idx + 9]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY reason code
                self.original_observation_element_quality_reason_code = self.additional_data[idx + 9:idx + 10]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code = self.additional_data[idx + 10:idx + 16]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier
                self.original_observation_element_quality_identifier = self.additional_data[idx + 16:idx + 19]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text_2 = self.additional_data[idx + 19:idx + 25]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY units code
                self.original_observation_element_quality_units_code = self.additional_data[idx + 25:idx + 26]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code_2 = self.additional_data[idx + 26:idx + 32]

                idx += 32

            elif code.startswith("Q06"):
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier, fields 6 1 6 3 6 1 6
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text = self.additional_data[idx + 3:idx + 9]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY reason code
                self.original_observation_element_quality_reason_code = self.additional_data[idx + 9:idx + 10]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code = self.additional_data[idx + 10:idx + 16]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier
                self.original_observation_element_quality_identifier = self.additional_data[idx + 16:idx + 19]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text_2 = self.additional_data[idx + 19:idx + 25]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY units code
                self.original_observation_element_quality_units_code = self.additional_data[idx + 25:idx + 26]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code_2 = self.additional_data[idx + 26:idx + 32]

                idx += 32

            elif code.startswith("Q07"):
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier, fields 6 1 6 3 6 1 6
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text = self.additional_data[idx + 3:idx + 9]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY reason code
                self.original_observation_element_quality_reason_code = self.additional_data[idx + 9:idx + 10]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code = self.additional_data[idx + 10:idx + 16]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier
                self.original_observation_element_quality_identifier = self.additional_data[idx + 16:idx + 19]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text_2 = self.additional_data[idx + 19:idx + 25]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY units code
                self.original_observation_element_quality_units_code = self.additional_data[idx + 25:idx + 26]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code_2 = self.additional_data[idx + 26:idx + 32]

                idx += 32


            elif code.startswith("R") and code[1:3].isdigit():
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier, fields 6 1 6 3 6 1 6
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text = self.additional_data[idx + 3:idx + 9]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY reason code
                self.original_observation_element_quality_reason_code = self.additional_data[idx + 9:idx + 10]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code = self.additional_data[idx + 10:idx + 16]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY identifier
                self.original_observation_element_quality_identifier = self.additional_data[idx + 16:idx + 19]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY original value text
                self.original_observation_element_quality_original_value_text_2 = self.additional_data[idx + 19:idx + 25]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY units code
                self.original_observation_element_quality_units_code = self.additional_data[idx + 25:idx + 26]
                # ORIGINAL-OBSERVATION-ELEMENT-QUALITY parameter code
                self.original_observation_element_quality_parameter_code_2 = self.additional_data[idx + 26:idx + 32]

                idx += 32

            elif code.startswith("REM"):
                # Remarks data section, fields 3 3 variable based on second field
                # GEOPHYSICAL-POINT-OBSERVATION remark identifier
                self.geophysical_point_observation_remark_identifier = self.additional_data[idx + 3:idx + 6]
                # GEOPHYSICAL-POINT-OBSERVATION remark length quantity
                self.geophysical_point_observation_remark_length_quantity = self.additional_data[idx + 6:idx + 9]

                remark_length = int(self.geophysical_point_observation_remark_length_quantity)

                # GEOPHYSICAL-POINT-OBSERVATION remark text
                self.geophysical_point_observation_remark_text = self.additional_data[idx + 9:idx + 9 + remark_length]

                idx += 9 + remark_length

            elif code.startswith("RH1"):
                # RELATIVE HUMIDITY occurrence identifier, fields 3 1 3 1 1 = 9
                # RELATIVE HUMIDITY period quantity
                self.relative_humidity_period_quantity_1 = self.additional_data[idx + 3:idx + 6]
                # RELATIVE HUMIDITY code
                self.relative_humidity_code_1 = self.additional_data[idx + 6:idx + 7]
                # RELATIVE HUMIDITY percentage
                self.relative_humidity_percentage_1 = self.additional_data[idx + 7:idx + 10]
                # RELATIVE HUMIDITY derived code
                self.relative_humidity_derived_code_1 = self.additional_data[idx + 10:idx + 11]
                # RELATIVE HUMIDITY quality code
                self.relative_humidity_quality_code_1 = self.additional_data[idx + 11:idx + 12]

                idx += 12

            elif code.startswith("RH2"):
                # RELATIVE HUMIDITY occurrence identifier, fields 3 1 3 1 1 = 9
                # RELATIVE HUMIDITY period quantity
                self.relative_humidity_period_quantity_2 = self.additional_data[idx + 3:idx + 6]
                # RELATIVE HUMIDITY code
                self.relative_humidity_code_2 = self.additional_data[idx + 6:idx + 7]
                # RELATIVE HUMIDITY percentage
                self.relative_humidity_percentage_2 = self.additional_data[idx + 7:idx + 10]
                # RELATIVE HUMIDITY derived code
                self.relative_humidity_derived_code_2 = self.additional_data[idx + 10:idx + 11]
                # RELATIVE HUMIDITY quality code
                self.relative_humidity_quality_code_2 = self.additional_data[idx + 11:idx + 12]

                idx += 12

            elif code.startswith("RH3"):
                # RELATIVE HUMIDITY occurrence identifier, fields 3 1 3 1 1 = 9
                # RELATIVE HUMIDITY period quantity
                self.relative_humidity_period_quantity_3 = self.additional_data[idx + 3:idx + 6]
                # RELATIVE HUMIDITY code
                self.relative_humidity_code_3 = self.additional_data[idx + 6:idx + 7]
                # RELATIVE HUMIDITY percentage
                self.relative_humidity_percentage_3 = self.additional_data[idx + 7:idx + 10]
                # RELATIVE HUMIDITY derived code
                self.relative_humidity_derived_code_3 = self.additional_data[idx + 10:idx + 11]
                # RELATIVE HUMIDITY quality code
                self.relative_humidity_quality_code_3 = self.additional_data[idx + 11:idx + 12]

                idx += 12

            elif code.startswith("WA1"):
                # PLATFORM-ICE-ACCRETION identifier, fields 1 3 1 1
                # PLATFORM-ICE-ACCRETION source code
                self.platform_ice_accretion_source_code = self.additional_data[idx + 3:idx + 4]
                # PLATFORM-ICE-ACCRETION thickness dimension
                self.platform_ice_accretion_thickness_dimension = self.additional_data[idx + 4:idx + 7]
                # PLATFORM-ICE-ACCRETION tendency code
                self.platform_ice_accretion_tendency_code = self.additional_data[idx + 7:idx + 8]
                # PLATFORM-ICE-ACCRETION quality code
                self.platform_ice_accretion_quality_code = self.additional_data[idx + 8:idx + 9]

                idx += 9

            else:
                raise Exception(f"Unknown additional data code {code}")

            # }}}


    def parsed_dry_bulb_deg_f(self) -> Optional[float]:
        if self.dry_bulb_air_temperature == "+9999":
            return None

        return (int(self.dry_bulb_air_temperature)/10.0) * 9 / 5 + 32

    def parsed_dry_bulb_deg_c(self) -> Optional[float]:
        if self.dry_bulb_air_temperature == "+9999":
            return None

        return int(self.dry_bulb_air_temperature)/10.0

    def parsed_dew_point_deg_f(self) -> Optional[float]:
        if self.dew_point_air_temperature == "+9999":
            return None

        return (int(self.dew_point_air_temperature)/10) * 9 / 5 + 32

    def year(self) -> int:
        return int(self.date[0:4])

    def month(self) -> int:
        return int(self.date[4:6])

    def day(self) -> int:
        return int(self.date[6:8])

    def hour(self) -> int:
        return int(self.time[0:2])

    def minute(self) -> int:
        return int(self.time[2:4])

    def rd_date(self, offset_hrs = 0) -> int:
        return mputils.fixed_from_gregorian(self.year(), self.month(), self.day(), self.hour(), self.minute(), True) + offset_hrs * 60

    def iso_date(self) -> str:
        return f"{self.year()}-{self.month():02}-{self.day():02}T{self.hour():02}:{self.minute():02}"

    def fields(self) -> List[Tuple[str, str]]:
        # Return a list of attributes to be written as headers or data
        return [
            (self.usaf, 'USAF'),
            (self.wban, 'WBAN'),
            (self.date, 'Date'),
            (self.time, 'Time'),
            (str(self.year()), 'Year'),
            (str(self.month()), 'Month'),
            (str(self.day()), 'Day'),
            (str(self.hour()), 'Hour'),
            (str(self.minute()), 'Minute'),
            (self.latitude, "Latitude"),
            (self.longitude, "Longitude"),
            (self.elevation, "Elevation"),
            (self.wind_direction_angle, "Wind Direction Angle"),
            (self.wind_speed, "Wind Speed"),
            (self.dry_bulb_air_temperature, "Dry Bulb Air Temperature"),
            (self.dew_point_air_temperature, "Dew Point Air Temperature"),
            (self.air_pressure, "Atmospheric Pressure"),
            (getattr(self, 'sky_condition_observation_total_coverage_code', ''), "Total Coverage"),
            (getattr(self, 'sky_condition_observation_total_opaque_coverage_code', ''), "Total Opague Coverage"),
        ]

    def tsv_line(self) -> str:
        return "\t".join([f"{value}" for value, _ in self.fields()])

    def tsv_header(self) -> str:
        return "\t".join([name for _, name in self.fields()])


class Doe2Record:
    def __init__(self,  month: int, day: int, hour: int, wet_bulb, dry_bulb, atmos_pressure, cloud_tenths, snow, rain, wind_dir, humidity_ratio, air_density, enthalpy, total_horiz_solar, direct_normal_solar, cloud_type, wind_speed) -> None:
        self.month: int = int(month)
        self.day = int(day)
        self.hour = int(hour)
        self.wet_bulb = wet_bulb
        self.dry_bulb = dry_bulb
        self.atmos_pressure = atmos_pressure
        self.cloud_tenths = cloud_tenths
        self.snow = snow
        self.rain = rain
        self.wind_dir = wind_dir
        self.humidity_ratio = humidity_ratio
        self.air_density = air_density
        self.enthalpy = enthalpy
        self.total_horiz_solar = total_horiz_solar
        self.direct_normal_solar = direct_normal_solar
        self.cloud_type = cloud_type
        self.wind_speed = wind_speed


    def to_fixed_line(self) -> str:
        # Fixed spacing format, right aligned:
        # 1-2: Month (1-12)
        # 3-4: Day (1-31)
        # 5-6: Hour (0-23)
        # 7-11: Wet Bulb Temperature (°F) (0 decimal places)
        # 12-16: Dry Bulb Temperature (°F) (0 decimal places)
        # 17-22: Atmospheric Pressure (in Hg) (0 decimal places)
        # 23-27: Cloud Amount (0-10) (0 decimal places)
        # 28-30: Snow indicator (0-1) (Int)
        # 31-33: Rain indicator (0-1) (Int)
        # 34-37: Wind Direction (0-15) (Int)
        # 38-44: Humidity Ratio (4 decimal places)
        # 45-50: Air Density (lb/ft3) (3 decimal places)
        # 51-56: Specific Enthalpy (Btu/lb) (1 decimal places)
        # 57-63: Total Horizontal Solar (BTU/hr-ft2) (1 decimal places)
        # 64-70: Direct Normal Solar (BTU/hr-ft2) (1 decimal places)
        # 71-73: Cloud Type (0-2) (Int)
        # 74-80: Wind Speed (knots) (0 decimal places)

        # If 0 decimal places, ends with a period
        # Nothing is 0 padded, all space padded

        month_str = f"{self.month:2d}"
        day_str = f"{self.day:2d}"
        hour_str = f"{self.hour:2d}"
        wet_bulb_str = f"{self.wet_bulb: 4.0f}."
        dry_bulb_str = f"{self.dry_bulb: 4.0f}."
        atmos_pressure_str = f"{self.atmos_pressure: 6.1f}"
        cloud_tenths_str = f"{self.cloud_tenths: 4.0f}."
        snow_str = f"{self.snow:3d}"
        rain_str = f"{self.rain:3d}"
        wind_dir_str = f"{self.wind_dir: 4d}"
        humidity_ratio_str = f"{self.humidity_ratio: 7.4f}"
        air_density_str = f"{self.air_density: 6.3f}"
        enthalpy_str = f"{self.enthalpy: 6.1f}"
        total_horiz_solar_str = f"{self.total_horiz_solar: 7.1f}"
        direct_normal_solar_str = f"{self.direct_normal_solar: 7.1f}"
        cloud_type_str = f"{self.cloud_type:3d}"
        wind_speed_str = f"{self.wind_speed: 4.0f}."

        fields = [month_str, day_str, hour_str, wet_bulb_str, dry_bulb_str, atmos_pressure_str, cloud_tenths_str, snow_str, rain_str, wind_dir_str, humidity_ratio_str, air_density_str, enthalpy_str, total_horiz_solar_str, direct_normal_solar_str, cloud_type_str, wind_speed_str]
        return "".join(fields)


def list_isd_files():
    with FTP("ftp.ncdc.noaa.gov") as ftp:
        ftp.login()
        ftp.cwd("pub/data/noaa")
        files = ftp.nlst()
        return files


def to_hourly(data: List[List[str]], year: int):
    desired_hourly_datetime_mins = []

    current_date_multiplier = 0
    start_day_num = mputils.fixed_from_gregorian(year, 1, 1) * 1440
    end_day_num = mputils.fixed_from_gregorian(year + 1, 1, 1) * 1440

    while start_day_num + current_date_multiplier * 60 < end_day_num:
        desired_hourly_datetime_mins.append(start_day_num + current_date_multiplier * 60)
        current_date_multiplier += 1

    data_datetimes = []
    for record in data:
        data_year, data_month, data_day, data_hour, data_minute, dry_bulb_f_str, dew_point_f_str = record
        data_year = int(data_year)
        data_month = int(data_month)
        data_day = int(data_day)
        data_hour = int(data_hour)
        data_minute = int(data_minute)

        dry_bulb_f = float(dry_bulb_f_str)
        dew_point_f = float(dew_point_f_str)

        data_rd_date = mputils.fixed_from_gregorian(data_year, data_month, data_day) * 1440 + data_hour * 60 + data_minute
        data_datetimes.append(data_rd_date)


    iterpolate_indexes = mputils.first_index_gteq(desired_hourly_datetime_mins, data_datetimes)
    index = 0

    out: List[Tuple[int, int, int, int, int, float, float]] = []

    while index < len(desired_hourly_datetime_mins):
        desired_time = desired_hourly_datetime_mins[index]
        y, mon, d, h, m = mputils.ymdhm_from_rd(desired_time)

        data_index = iterpolate_indexes[index]

        dry_bulb_f: float
        dew_point_f: float
        fields: Tuple[int, int, int, int, int, float, float]

        if data_index is None or data_index == 0:
            fields = (y, mon, d, h, m, 0.0, 0.0)
        else:
            # Iterpolate
            data_year1, data_month1, data_day1, data_hour1, data_minute1, dry_bulb_f1, dew_point_f1 = data[data_index - 1]
            data_year2, data_month2, data_day2, data_hour2, data_minute2, dry_bulb_f2, dew_point_f2 = data[data_index]

            data_rd_date1 = mputils.fixed_from_gregorian(data_year1, data_month1, data_day1) * 1440 + data_hour1 * 60 + data_minute1
            data_rd_date2 = mputils.fixed_from_gregorian(data_year2, data_month2, data_day2) * 1440 + data_hour2 * 60 + data_minute2

            dry_bulb_f: float = dry_bulb_f1 + (dry_bulb_f2 - dry_bulb_f1) * (desired_time - data_rd_date1) / (data_rd_date2 - data_rd_date1)
            dew_point_f: float = dew_point_f1 + (dew_point_f2 - dew_point_f1) * (desired_time - data_rd_date1) / (data_rd_date2 - data_rd_date1)

            if dry_bulb_f < -100 or dry_bulb_f > 150:
                print(f"Warning: dry bulb temperature out of range: {dry_bulb_f} F. Interpolating between {dry_bulb_f1} F and {dry_bulb_f2} F")

            fields = (y, mon, d, h, m, dry_bulb_f, dew_point_f)

        out.append(fields)
        index += 1

    return out


def get_isd_file_contents(usaf: str, year: int) -> str:
    with FTP("ftp.ncdc.noaa.gov") as ftp:
        ftp.login()
        ftp.cwd(f"pub/data/noaa/{year}")

        files = []
        for file in ftp.nlst():
            if file.startswith(usaf):
                files.append(file)

        compressed_buffer = BytesIO()
        ftp.retrbinary(f"RETR {files[0]}", compressed_buffer.write)

        compressed_buffer.seek(0) # Go back to the start of the buffer

        # Decompress the file, UTF-8 decode it and return string
        decompressed = gzip.decompress(compressed_buffer.read()).decode("utf-8")
        return decompressed


def get_isd_file_contents_http(usaf: str, wban: str, year: int) -> str:
    url = f"https://www1.ncdc.noaa.gov/pub/data/noaa/{year}/{usaf}-{wban}-{year}.gz"
    response = requests.get(url)
    if response.status_code != 200:
        raise Exception(f"HTTP request failed with status code {response.status_code}")
    return gzip.decompress(response.content).decode("utf-8")

def parse_isd_file_2(contents: Union[str, List[str], TextIO]) -> List[IsdRecord]:
    records = contents.splitlines() if isinstance(contents, str) else contents

    data: List[IsdRecord] = []

    row = 1
    for r in records:
        data.append(IsdRecord(r))
        row += 1

    return data

def parse_isd_file(contents: Union[str, List[str], TextIO], offset: int, dst = True):
    records = contents.splitlines() if isinstance(contents, str) else contents

    data = []
    for record in records:
        # These are all UTC times
        year_utc   = int(record[15:19])
        month_utc  = int(record[19:21])
        day_utc    = int(record[21:23])
        hour_utc   = int(record[23:25])
        minute_utc = int(record[25:27])

        #  wind_speed_mps = int(record[65:69]) / 10
        #  wind_speed_mph = wind_speed_mps * 2.23694

        dry_bulb_c_raw = record[87:92]

        if dry_bulb_c_raw == "+9999":
            continue

        dry_bulb_c = int(record[87:92]) / 10
        dry_bulb_f = dry_bulb_c * 9 / 5 + 32
        dew_point_c = int(record[93:98]) / 10
        dew_point_f = dew_point_c * 9 / 5 + 32
        #  air_pressure_hPa = int(record[99:104]) / 10

        rd_datetime_utc = mputils.fixed_from_gregorian(year_utc, month_utc, day_utc) + hour_utc / 24 + minute_utc / 1440
        if dst:
            rd_datetime_local = mputils.utc_to_local(rd_datetime_utc, offset)
        else:
            rd_datetime_local = rd_datetime_utc + offset / 24

        year, month, day = mputils.ymd_from_rd(rd_datetime_local)

        hour   = math.floor((rd_datetime_local - math.floor(rd_datetime_local)) * 24)
        minute = math.floor((rd_datetime_local - math.floor(rd_datetime_local)) * 1440) % 60

        fields = [
            year,
            month,
            day,
            hour,
            minute,
            dry_bulb_f,
            dew_point_f,
        ]
        data.append(fields)

    return data

def convert_to_tsv():
    idx = 1
    offset = None

    while idx < len(sys.argv):
        if sys.argv[idx] == "-h" or sys.argv[idx] == "--help":
            print("Usage: isd2tsv < isd_file > tsv_file")
            sys.exit(0)
        else:
            # Parse as integer offset
            try:
                offset = int(sys.argv[idx])
                idx += 1
            except ValueError:
                print(f"Error: {sys.argv[idx]} is not a valid offset", file=sys.stderr)
                sys.exit(1)

    if offset is None:
        print("Error: no offset given", file=sys.stderr)
        sys.exit(1)

    data = parse_isd_file(sys.stdin, offset)
    print("year\tmonth\tday\thour\tminute\tdry_bulb_f\tdew_point_f")
    for record in data:
        print(*record, sep='\t', end='\n')



def sat_partial_pressure_si(t: float) -> float:
    t_kelvin = t + 273.15

    if t >= 0:
        n1  = 0.11670521452767e4
        n2  = -0.72421316703206e6
        n3  = -0.17073846940092e2
        n4  = 0.12020824702470e5
        n5  = -0.32325550322333e7
        n6  = 0.14915108613530e2
        n7  = -0.48232657361591e4
        n8  = 0.40511340542057e6
        n9  = -0.23855557567849e0
        n10 = 0.65017534844798e3

        theta = t_kelvin + n9 / (t_kelvin - n10)

        A = theta*theta + n1 * theta + n2
        B = n3 * theta * theta + n4 * theta + n5
        C = n6 * theta * theta + n7 * theta + n8

        pws = 1000 * ((2 * C) / ( -B + math.sqrt(B*B - 4*A*C) ))**4
    else:
        a1 = -0.212144006e2
        a2 = 0.273203819e2
        a3 = -0.610598130e1
        b1 = 0.333333333e-2
        b2 = 0.120666667e1
        b3 = 0.170333333e1
        theta = t_kelvin / 273.16

        pws = 0.611657 * math.exp((1 / theta) * (a1*theta**b1 +  a2*theta**b2 + a3*theta**b3)  )

    return pws


def try_get_cached(usaf: str, wban: str, year: int) -> Optional[str]:
    try:
        with open('/tmp/isd_cache/cache.txt') as cache_file:
            for cache_line in cache_file:
                current_datetime = datetime.datetime.now()
                current_year = current_datetime.year
                current_month = current_datetime.month
                current_day = current_datetime.day

                search_list = [usaf, wban, str(year), str(current_year), str(current_month), str(current_day)]

                fields = [f.strip() for f in cache_line.split('\t')]
                if len(fields) != 6:
                    continue

                all_true = False
                for i in range(len(search_list)):
                    if search_list[i] == fields[i]:
                        all_true = True
                    else:
                        all_true = False
                        break

                if all_true:
                    # Try to open the cached file at /tmp/isd_cache/{usaf}-{wban}-{y}.txt
                    with open(f"/tmp/isd_cache/{usaf}-{wban}-{year}.txt") as cached_file:
                        return cached_file.read()
    except:
        return None


def get_year_utilizing_cache(usaf: str, wban: str, y: int) -> str:
    cached_contents = try_get_cached(usaf, wban, y)

    if cached_contents is not None:
        print(f"Using cached file for {usaf}-{wban}-{y}", file=sys.stderr)
        contents = cached_contents
    else:
        contents = get_isd_file_contents_http(usaf, wban, y)
        os.makedirs("/tmp/isd_cache", exist_ok=True)
        # Save to cache
        with open(f"/tmp/isd_cache/{usaf}-{wban}-{y}.txt", "w") as f:
            f.write(contents)

        with open('/tmp/isd_cache/cache.txt', 'a') as cache_file:
            current_datetime = datetime.datetime.now()
            current_year = current_datetime.year
            current_month = current_datetime.month
            current_day = current_datetime.day

            cache_file.write(f"{usaf}\t{wban}\t{y}\t{current_year}\t{current_month}\t{current_day}\n")

    return contents


def hourly_year(usaf: str, wban: str, year: int, offset_hrs: int, ip = False, dst = False, minute_interval = 60, datetime_format = None):
    """
    returns list of tuples
    0: year (YYYY)
    1: month (1-12)
    2: day (1-31)
    3: hour (0-23)
    4: minute (0-59)
    5: Dry Bulb SI: Celsius, IP: Fahrenheit
    6: Dew Point SI: Celsius, IP: Fahrenheit
    7: Relative Humidity (%, 0-100)
    8: Pressure SI: Pa, IP: psia
    9: Wind Direction (degrees, 0-360)
    10: Wind Speed SI: m/s, IP: mph
    11: Total Cloud Cover (tenths, 0-10)
    """
    # lines.append((y, mon, d, h, m, toa, tdp, relative_humidity, press, wind_dir, wind_speed, total_cloud_cover))

    if offset_hrs < 0:
        years = [year, year + 1]
    elif offset_hrs > 0:
        years = [year - 1, year]
    else:
        years = [year]

    isd_records: List[IsdRecord] = []

    lines = []

    for y in years:
        # Check if year is later than current. If so, skip
        if y > datetime.datetime.now().year:
            print(f"Skipping year {y} as it is in the future", file=sys.stderr)
            continue

        print(f"Downloading {y}", file=sys.stderr)

        # Check for cached file information from /tmp/isd_cache/cache.txt
        # Simple text file that has tab separated columns of usaf, wban, year, year-cache-date, month-cache-date, day-cache-date

        cached_contents = try_get_cached(usaf, wban, y)

        if cached_contents is not None:
            print(f"Using cached file for {usaf}-{wban}-{y}", file=sys.stderr)
            contents = cached_contents
        else:
            contents = get_isd_file_contents_http(usaf, wban, y)
            os.makedirs("/tmp/isd_cache", exist_ok=True)
            # Save to cache
            with open(f"/tmp/isd_cache/{usaf}-{wban}-{y}.txt", "w") as f:
                f.write(contents)

            with open('/tmp/isd_cache/cache.txt', 'a') as cache_file:
                current_datetime = datetime.datetime.now()
                current_year = current_datetime.year
                current_month = current_datetime.month
                current_day = current_datetime.day

                cache_file.write(f"{usaf}\t{wban}\t{y}\t{current_year}\t{current_month}\t{current_day}\n")

        records = contents.splitlines()

        for record in records:
            isd_record = IsdRecord(record)
            isd_records.append(isd_record)


    # Get the indicies for interpolation
    toa_array = [r for r in isd_records if r.dry_bulb_air_temperature != "+9999"]
    tdp_array = [r for r in isd_records if r.dew_point_air_temperature != "+9999"]
    press_array = [r for r in isd_records if r.air_pressure != "99999"]
    wind_dir_array = [r for r in isd_records if r.wind_direction_angle != "999"]
    wind_speed_array = [r for r in isd_records if r.wind_speed != "9999"]

    cloud_cover_map = {
        0: 0,
        1: 1,
        2: 2,
        3: 4,
        4: 5,
        5: 6,
        6: 7,
        7: 9,
        8: 10,
    }
    # Total cloud coverage in tenths. NOAA comes in as Okta, which is 0-8
    total_cloud_cover_array = []
    total_cloud_cover_rd_date_array = []
    for rec in isd_records:
        total_cloud_cover_str = getattr(rec, 'sky_condition_observation_total_coverage_code', '99')
        if total_cloud_cover_str != '99':
            # Try to parse as integer between 0-8
            try:
                total_cloud_cover_int = int(total_cloud_cover_str)
                if total_cloud_cover_int >= 0 and total_cloud_cover_int <= 8:
                    # Update to 0-10 scale
                    tenths = cloud_cover_map[total_cloud_cover_int]
                    total_cloud_cover_array.append(tenths)
                    total_cloud_cover_rd_date_array.append(rec.rd_date(offset_hrs))
            except ValueError:
                continue


    # As minute integer
    year_dates = rd_dates_for_year(year, minute_interval)

    print(f"Len year dates for year {year}: {len(year_dates)}", file=sys.stderr)

    toa_indicies = mputils.first_index_gteq(year_dates, [r.rd_date(offset_hrs) for r in toa_array])
    tdp_indicies = mputils.first_index_gteq(year_dates, [r.rd_date(offset_hrs) for r in tdp_array])
    press_indicies = mputils.first_index_gteq(year_dates, [r.rd_date(offset_hrs) for r in press_array])
    wind_dir_indicies = mputils.first_index_gteq(year_dates, [r.rd_date(offset_hrs) for r in wind_dir_array])
    wind_speed_indicies = mputils.first_index_gteq(year_dates, [r.rd_date(offset_hrs) for r in wind_speed_array])
    total_cloud_cover_indicies = mputils.first_index_gteq(year_dates, total_cloud_cover_rd_date_array)

    def interpolate(record_array: List[IsdRecord], selector, index) -> float:
        record_1: IsdRecord = record_array[index - 1]
        record_2 = record_array[index]

        datetime_1 = record_1.rd_date(offset_hrs)
        datetime_2 = record_2.rd_date(offset_hrs)

        if datetime_2 - datetime_1 > 120:
            print(f"Warning: {datetime_2 - datetime_1} minutes between records: {record_1.iso_date()} and {record_2.iso_date()}", file=sys.stderr)

        slope = (float(selector(record_2)) - float(selector(record_1))) / (record_2.rd_date(offset_hrs) - record_1.rd_date(offset_hrs))
        return slope * (year_dates[i] - record_1.rd_date(offset_hrs)) + float(selector(record_1))


    for i in range(len(year_dates)):
        toa_index = toa_indicies[i]
        tdp_index = tdp_indicies[i]
        press_index = press_indicies[i]
        wind_dir_index = wind_dir_indicies[i]
        wind_speed_index = wind_speed_indicies[i]
        total_cloud_cover_index = total_cloud_cover_indicies[i]

        # Calculate dry-bulb
        if toa_index is None or toa_index == 0:
            toa = None
        else:
            # divide by 10 for scale factor
            toa = interpolate(toa_array, lambda r: r.dry_bulb_air_temperature, toa_index) / 10

        # Calculate dew-point
        if tdp_index is None or tdp_index == 0:
            tdp = None
        else:
            # divide by 10 for scale factor
            tdp = interpolate(tdp_array, lambda r: r.dew_point_air_temperature, tdp_index) / 10

        # Calculate humidity
        if (toa == "99.9" or toa is None) or (tdp == "99.9" or tdp is None):
            relative_humidity = None
        else:
            pw = sat_partial_pressure_si(float(tdp))
            pws = sat_partial_pressure_si(float(toa))
            relative_humidity = 100 * pw / pws

        # Calculate Air Pressure in Pa
        if press_index is None or press_index == 0:
            press = None
        else:
            # divide by 10 for scale factor, multiply by 100 for Pa
            press = interpolate(press_array, lambda r: r.air_pressure, press_index) / 10 * 100

        # Calculate wind direction
        if wind_dir_index is None or wind_dir_index == 0:
            wind_dir = None
        else:
            # Need special angle interpolation
            record_1 = wind_dir_array[wind_dir_index - 1]
            record_2 = wind_dir_array[wind_dir_index]

            angle_1 = float(record_1.wind_direction_angle)
            angle_2 = float(record_2.wind_direction_angle)

            # Normalize to make angle 1 the smaller angle
            if angle_1 > angle_2:
                angle_1, angle_2 = angle_2, angle_1

            distance_1 = (angle_2 - angle_1)
            distance_2 = (angle_1 + 360 - angle_2)

            if distance_1 < distance_2:
                slope: float = (distance_1) / (record_2.rd_date(offset_hrs) - record_1.rd_date(offset_hrs))
                wind_dir = float(slope * (year_dates[i] - record_1.rd_date(offset_hrs)) + angle_1)
            else:
                slope: float = (distance_2) / (record_2.rd_date(offset_hrs) - record_1.rd_date(offset_hrs))
                wind_dir = float((slope * (year_dates[i] - record_1.rd_date(offset_hrs)) + angle_2) % 360)

        # Calculate wind speed
        if wind_speed_index is None or wind_speed_index == 0:
            year, mon, d, h, m = mputils.ymdhm_from_rd(year_dates[i])
            wind_speed = None
        else:
            try:
                wind_speed_float = (interpolate(wind_speed_array, lambda r: r.wind_speed, wind_speed_index) / 10)
                wind_speed = wind_speed_float
            except OverflowError:
                # Print out details
                record_1 = wind_speed_array[wind_speed_index - 1].wind_speed
                record_2 = wind_speed_array[wind_speed_index].wind_speed
                print(f"OverflowError: {record_1} and {record_2}", file=sys.stderr)
                wind_speed = None


        # Calculate Total Cloud Cover
        if total_cloud_cover_index is None or total_cloud_cover_index == 0:
            total_cloud_cover = None
        else:
            # Hand interpolate
            tenths_2 = total_cloud_cover_array[total_cloud_cover_index]
            tenths_1 = total_cloud_cover_array[total_cloud_cover_index - 1]
            rd_date_2 = total_cloud_cover_rd_date_array[total_cloud_cover_index]
            rd_date_1 = total_cloud_cover_rd_date_array[total_cloud_cover_index - 1]
            slope = (tenths_2 - tenths_1) / (rd_date_2 - rd_date_1)

            # Round to nearest integer
            total_cloud_cover = int(round(slope * (year_dates[i] - rd_date_1) + tenths_1))


        y, mon, d, h, m = mputils.ymdhm_from_rd(year_dates[i])

        if dst and mputils.is_dst(y, mon, d, h):
            y, mon, d, h, m = mputils.ymdhm_from_rd(year_dates[i] + 60)

        if ip:
            toa = toa * 9 / 5 + 32 if toa is not None else None
            tdp = tdp * 9 / 5 + 32 if tdp is not None else None
            # Pa to psi
            press = press / 6894.7573 if press is not None else None
            # m/s to mph
            wind_speed = wind_speed * 2.23694 if wind_speed is not None else None

        if datetime_format is not None:
            datetime_str = datetime.datetime(y, mon, d, h, m).strftime(datetime_format)
            lines.append((datetime_str, toa, tdp, relative_humidity, press, wind_dir, wind_speed, total_cloud_cover))
        else:
            lines.append((y, mon, d, h, m, toa, tdp, relative_humidity, press, wind_dir, wind_speed, total_cloud_cover))

    return lines


def convert_to_epw(usaf: str, wban: str, year: int, offset_hrs: int):
    if offset_hrs < 0:
        years = [year, year + 1]
    elif offset_hrs > 0:
        years = [year - 1, year]
    else:
        years = [year]

    isd_records: List[IsdRecord] = []

    output_epw: List[str] = []

    for y in years:
        print(f"Downloading {y}", file=sys.stderr)
        contents = get_isd_file_contents_http(usaf, wban, y)

        records = contents.splitlines()

        for record in records:
            isd_record = IsdRecord(record)
            isd_records.append(isd_record)


    # Get the indicies for interpolation
    toa_array = [r for r in isd_records if r.dry_bulb_air_temperature != "+9999"]
    tdp_array = [r for r in isd_records if r.dew_point_air_temperature != "+9999"]
    press_array = [r for r in isd_records if r.air_pressure != "99999"]
    wind_dir_array = [r for r in isd_records if r.wind_direction_angle != "999"]
    wind_speed_array = [r for r in isd_records if r.wind_speed != "9999"]

    cloud_cover_map = {
        0: 0,
        1: 1,
        2: 2,
        3: 4,
        4: 5,
        5: 6,
        6: 7,
        7: 9,
        8: 10,
    }
    # Total cloud coverage in tenths. NOAA comes in as Okta, which is 0-8
    total_cloud_cover_array = []
    total_cloud_cover_rd_date_array = []
    for rec in isd_records:
        total_cloud_cover_str = getattr(rec, 'sky_condition_observation_total_coverage_code', '99')
        if total_cloud_cover_str != '99':
            # Try to parse as integer between 0-8
            try:
                total_cloud_cover_int = int(total_cloud_cover_str)
                if total_cloud_cover_int >= 0 and total_cloud_cover_int <= 8:
                    # Update to 0-10 scale
                    tenths = cloud_cover_map[total_cloud_cover_int]
                    total_cloud_cover_array.append(tenths)
                    total_cloud_cover_rd_date_array.append(rec.rd_date(offset_hrs))
            except ValueError:
                continue


    year_dates = rd_dates_for_year(year)

    print(f"Len year dates for year {year}: {len(year_dates)}", file=sys.stderr)

    toa_indicies = mputils.first_index_gteq(year_dates, [r.rd_date(offset_hrs) for r in toa_array])
    tdp_indicies = mputils.first_index_gteq(year_dates, [r.rd_date(offset_hrs) for r in tdp_array])
    press_indicies = mputils.first_index_gteq(year_dates, [r.rd_date(offset_hrs) for r in press_array])
    wind_dir_indicies = mputils.first_index_gteq(year_dates, [r.rd_date(offset_hrs) for r in wind_dir_array])
    wind_speed_indicies = mputils.first_index_gteq(year_dates, [r.rd_date(offset_hrs) for r in wind_speed_array])
    total_cloud_cover_indicies = mputils.first_index_gteq(year_dates, total_cloud_cover_rd_date_array)

    def interpolate(record_array: List[IsdRecord], selector, index) -> float:
        record_1: IsdRecord = record_array[index - 1]
        record_2 = record_array[index]

        datetime_1 = record_1.rd_date(offset_hrs)
        datetime_2 = record_2.rd_date(offset_hrs)

        if datetime_2 - datetime_1 > 120:
            print(f"Warning: {datetime_2 - datetime_1} minutes between records: {record_1.iso_date()} and {record_2.iso_date()}", file=sys.stderr)

        slope = (float(selector(record_2)) - float(selector(record_1))) / (record_2.rd_date(offset_hrs) - record_1.rd_date(offset_hrs))
        return slope * (year_dates[i] - record_1.rd_date(offset_hrs)) + float(selector(record_1))


    for i in range(len(year_dates)):
        toa_index = toa_indicies[i]
        tdp_index = tdp_indicies[i]
        press_index = press_indicies[i]
        wind_dir_index = wind_dir_indicies[i]
        wind_speed_index = wind_speed_indicies[i]
        total_cloud_cover_index = total_cloud_cover_indicies[i]

        # Calculate dry-bulb
        if toa_index is None or toa_index == 0:
            toa = "99.9"
        else:
            # divide by 10 for scale factor
            toa = str(interpolate(toa_array, lambda r: r.dry_bulb_air_temperature, toa_index) / 10)

        # Calculate dew-point
        if tdp_index is None or tdp_index == 0:
            tdp = "99.9"
        else:
            # divide by 10 for scale factor
            tdp = str(interpolate(tdp_array, lambda r: r.dew_point_air_temperature, tdp_index) / 10)

        # Calculate humidity
        if toa == "99.9" or tdp == "99.9":
            humidity = "999"
        else:
            pw = sat_partial_pressure_si(float(tdp))
            pws = sat_partial_pressure_si(float(toa))
            humidity = str(100 * pw / pws)

        # Calculate Air Pressure in Pa
        if press_index is None or press_index == 0:
            press = "999999"
        else:
            # divide by 10 for scale factor, multiply by 100 for Pa
            press = str(interpolate(press_array, lambda r: r.air_pressure, press_index) / 10 * 100)

        # Calculate wind direction
        if wind_dir_index is None or wind_dir_index == 0:
            wind_dir = "999"
        else:
            # Need special angle interpolation
            record_1 = wind_dir_array[wind_dir_index - 1]
            record_2 = wind_dir_array[wind_dir_index]

            angle_1 = float(record_1.wind_direction_angle)
            angle_2 = float(record_2.wind_direction_angle)

            # Normalize to make angle 1 the smaller angle
            if angle_1 > angle_2:
                angle_1, angle_2 = angle_2, angle_1

            distance_1 = (angle_2 - angle_1)
            distance_2 = (angle_1 + 360 - angle_2)

            if distance_1 < distance_2:
                slope = (distance_1) / (record_2.rd_date(offset_hrs) - record_1.rd_date(offset_hrs))
                wind_dir = str(slope * (year_dates[i] - record_1.rd_date(offset_hrs)) + angle_1)
            else:
                slope = (distance_2) / (record_2.rd_date(offset_hrs) - record_1.rd_date(offset_hrs))
                wind_dir = str((slope * (year_dates[i] - record_1.rd_date(offset_hrs)) + angle_2) % 360)

        # Calculate wind speed
        if wind_speed_index is None or wind_speed_index == 0:
            wind_speed = "999"
        else:
            wind_speed_float = (interpolate(wind_speed_array, lambda r: r.wind_speed, wind_speed_index) / 10)
            wind_speed = f"{wind_speed_float:.1f}"

        # Calculate Total Cloud Cover
        if total_cloud_cover_index is None or total_cloud_cover_index == 0:
            total_cloud_cover = "99"
        else:
            # Hand interpolate
            tenths_2 = total_cloud_cover_array[total_cloud_cover_index]
            tenths_1 = total_cloud_cover_array[total_cloud_cover_index - 1]
            rd_date_2 = total_cloud_cover_rd_date_array[total_cloud_cover_index]
            rd_date_1 = total_cloud_cover_rd_date_array[total_cloud_cover_index - 1]
            slope = (tenths_2 - tenths_1) / (rd_date_2 - rd_date_1)

            # Round to nearest integer
            total_cloud_cover = str(round(slope * (year_dates[i] - rd_date_1) + tenths_1))

        y, mon, d, h, m = mputils.ymdhm_from_rd(year_dates[i])

        epw_fields = [
            str(y),
            str(mon),
            str(d),
            str(h + 1), # Hour (1-24)
            str(m + 1), # Minute (1-60)
            "A7A7A0A7?0?0?0?0?0?0?0?0A7A7F0F0?0?0F0F0?0?0",
            toa,
            tdp,
            humidity,
            press,
            "9999", # Extraterrestrial Horizontal Radiation (Wh/m2, Not currently used, 9999 missing)
            "9999", # Extraterrestrial Direct Normal Radiation (Wh/m2, Not currently used, 9999 missing)
            "9999", # Horizontal Infrared Radiation Intensity (Wh/m2, 9999 missing. If missing calculated from Opaque Sky Cover field)
            "9999", # Global Horizontal Radiation (Wh/m2, not currently used, 9999 missing)
            "9999", # Direct Normal Radiation (Wh/m2,  >=9999 missing) (Amount of solar radiation in Wh/m2 received directly from the solar disk on a surface perpendicular to the sun’s rays, during the number of minutes preceding the time indicated.) If the field is missing (≥ 9999 ) or invalid (< 0 ), it is set to 0. Counts of such missing values are totaled and presented at the end of the run period.
            "9999", # Diffuse Horizontal Radiation (Wh/m2, >=9999 missing) (Amount of solar radiation in Wh/m2 received from the sky (excluding the solar disk) on a horizontal surface during the number of minutes preceding the time indicated.) If the field is missing (≥ 9999 ) or invalid (< 0 ), it is set to 0.
            "999999", # Global Horizontal Illuminance (lux, not currently used, 999999 missing)
            "999999", # Direct Normal Illuminance (lux, not currently used, 999999 missing)
            "999999", # Diffuse Horizontal Illuminance (lux, not currently used, 999999 missing)
            "9999", # Zenith Luminance (Cd/m2, not currently used, 9999 missing)
            wind_dir, # Wind Direction (degrees, 999 missing) This is the Wind Direction in degrees where the convention is that North = 0.0, East = 90.0, South = 180.0, West = 270.0. (Wind direction in degrees at the time indicated. If calm, direction equals zero.) Values can range from 0 to 360. Missing value is 999.
            wind_speed, # Wind Speed (m/s, 0-40, 999 missing)
            total_cloud_cover, # Total Sky Cover (tenths of coverage, 99 missing, 0 - 10)
            "99", # Opaque Sky Cover (tenths of coverage, 99 missing, 0 - 10) This is not used unless the field for Horizontal Infrared Radiation Intensity is missing and then it is used to calculate Horizontal Infrared Radiation Intensity. Minimum value is 0; maximum value is 10; missing value is 99.
            "9999", # Visibility (km, not currently used, 9999 missing)
            "99999", # Ceiling Height (m, not currently used, 99999 missing)
            "9", # Present Weather Observation (0 or 9) 0 = Weather observation made. 9 = Weather observation not made, or missing
            "999999999", # Present Weather Codes (999999999 missing)
            "999", # Precipitable Water (mm, not currently used, 999 missing)
            ".999", # Aerosol Optical Depth (thousandths, not currently used, .999 missing)
            "999", # Snow Depth (cm, 999 missing)
            "99", # Days Since Last Snowfall (days, not currently used, 99 missing)
            "0.3", # Albedo (ratio, not currently used, doesn't say missing, average albedo on Earth is ~0.3)
            "999", # Liquid Precipitation Depth (mm, 999 missing)
            "99", # Liquid Precipitation Quantity (hr, not currently used, 99 missing)
        ]

        output_epw.append(",".join(epw_fields))

    return output_epw

def rd_dates_for_year(year: int, minute_interval: int = 60) -> List[int]:
    start = mputils.fixed_from_gregorian(year, 1, 1, 0, 0, True)
    end = mputils.fixed_from_gregorian(year + 1, 1, 1, 0, 0, True)
    return list(range(start, end, minute_interval))

def average_temps(dates: List[Tuple[int, int]], data_hourly) -> List[float]:
    outputs = []
    records = []

    for date in dates:
        start_date_inc = date[0]
        end_date_exc = date[1]

        records.clear()
        
        for record in data_hourly:
            try:
                rd_date = mputils.fixed_from_gregorian(record[0], record[1], record[2])
            except Exception as e:
                print(f"Error: {e}", file=sys.stderr)
                continue
            if rd_date >= start_date_inc and rd_date < end_date_exc and record[5] is not None:
                records.append(record)
            elif rd_date >= end_date_exc:
                break

        if len(records) == 0:
            outputs.append(None)
        else:
            average_oat = sum([float(record[5]) for record in records]) / len(records)
            outputs.append(average_oat)

    return outputs

def isd_date_to_local_str(record, offset, dst):
    rd_date_local = record.rd_date(offset)
    year_local, month_local, day_local, hour_local, minute_local = mputils.ymdhm_from_rd(rd_date_local)
    if dst and mputils.is_dst(year_local, month_local, day_local, hour_local):
        rd_date_local += 60
    y, mon, d, h, m = mputils.ymdhm_from_rd(rd_date_local)
    return f"{y}-{mon:02d}-{d:02d} {h:02d}:{m:02d}"


def print_single_col_fmt(usaf, wban, year, ip, offset, dst):
    contents = get_year_utilizing_cache(usaf, wban, year)
    data = parse_isd_file_2(contents)
    # Print out dry bulb, dew point, and relative humidity for now.
    try:
        if ip:
            sys.stdout.write("Dry Bulb Temperature (°F)\n")
            for record in data:
                parsed_dry_bulb = record.parsed_dry_bulb_deg_f()
                if parsed_dry_bulb is not None:
                    date_str = isd_date_to_local_str(record, offset, dst)
                    sys.stdout.write(f"{date_str}\t{parsed_dry_bulb:.2f}\n")
        else:
            sys.stdout.write("Dry Bulb Temperature (°C)\n")
            for record in data:
                parsed_dry_bulb = record.parsed_dry_bulb_deg_c()
                if parsed_dry_bulb is not None:
                    date_str = isd_date_to_local_str(record, offset, dst)
                    sys.stdout.write(f"{date_str}\t{parsed_dry_bulb:.2f}\n")
    except BrokenPipeError:
        sys.exit(0)


def averages():
    years = [2019, 2020, 2021, 2022, 2023]
    data = []
    for year in years:
        print(f"Downloading {year}", file=sys.stderr)
        contents = get_isd_file_contents_http("724050", "13743", year)
        d = parse_isd_file(contents, -5, False)
        data.extend(d)

    hourly_data = []
    for y in years:
        print(f"Converting {y}", file=sys.stderr)
        h = to_hourly(data, y)
        hourly_data.extend(h)

    grouped_by_month = mputils.groupby(hourly_data, lambda x: int(x[0]) * 12 + int(x[1]) - 1)

    for month_num, records in grouped_by_month.items():
        average_oat = sum([float(record[5]) for record in records]) / len(records)

        year, month = divmod(month_num, 12)
        print (f"{year}\t{month + 1}\t{average_oat}")

    #  for record in hourly_data:
        #  print(*record, sep='\t', end='\n')


def handle_avg_temp_cmd(date_file, usaf, wban, offset, ip, dst):
    date_periods = []
    if date_file is None:
        # date_file is assumed to be stdin
        file_io = sys.stdin
    else:
        file_io = open(date_file, 'r')

    if offset is None:
        print("Error: no offset given", file=sys.stderr)
        sys.exit(1)

    try:
        for line in file_io:
            split_line = line.rstrip().split()
            if len(split_line) != 2:
                print(f"Error: invalid date file line: {line}", file=sys.stderr)
                sys.exit(1)

            # Each field expected to be YYYY-MM-DD
            if len(split_line[0]) != 10 or len(split_line[1]) != 10:
                print(f"Error: invalid date file line: {line}", file=sys.stderr)
                sys.exit(1)

            start_date_rd = parse_iso_date(split_line[0])
            end_date_rd = parse_iso_date(split_line[1])

            if start_date_rd > end_date_rd:
                print(f"Error: start date is after end date: {line}", file=sys.stderr)
                sys.exit(1)

            date_periods.append((start_date_rd, end_date_rd))
    finally:
        file_io.close()

    # Get the minimum, and maximum start date
    min_start_date_rd = min([start_date_rd for start_date_rd, _ in date_periods])
    max_end_date_rd = max([end_date_rd for _, end_date_rd in date_periods])

    min_year = mputils.year_from_rd(min_start_date_rd)
    max_year = mputils.year_from_rd(max_end_date_rd)

    y = min_year

    all_hourly_data = []

    while y <= max_year:
        data = hourly_year(usaf, wban, y, offset, ip, dst)
        all_hourly_data.extend(data)
        y += 1

    averages = average_temps(date_periods, all_hourly_data)

    for i in range(len(averages)):
        fields = [mputils.iso_date_str(date_periods[i][0]), mputils.iso_date_str(date_periods[i][1]), str(averages[i])]
        print("\t".join(fields))


def help_text() -> str:
    return """Usage: isd2tsv [options]

Options:
    -h, --help: Show this help text
    -u, --usaf: USAF code (6 digits, ex: 722590)
    -w, --wban: WBAN code (5 digits, ex: 03927)
    -y, --year: Year
    -o, --offset: Standard offset in hours from UTC (ex: CST is -o -6)
    --dst: Account for daylight savings time (affects --hourly). Default is off.
    --format: Set timestamp format. Used in Python strftime format. By default, date items are in separate columns.
    --hourly: Get data in interpolated hourly format
    --header: Add header to output (only for hourly output currently)
    --interval: Minute interval for hourly data (default is 60)
    --ip: Convert to imperial units
    --dfw: Shortcut for my location (DFW airport)
    --iah: Shortcut for Houston (IAH airport)
    --hou: Shortcut for Houston (HOU airport)
    --epw: Convert to epw
    --tsv: Convert to tsv
    --cc: Cloud coverage
    --fmt: Format
    --solar FILE: Solar data file, used in creating fmt
    --ave-dates DATEFILE: Get average outdoor air temperature for each period in DATEFILE, a whitespace separated file of ISO-dates (YYYY-MM-DD)


Examples:

    Get epw for DFW for 2019:
    isd2tsv --dfw --year 2019 -o 6 --epw

    Get average temperature data in IP for IAH airport for dates in dates.txt:
    isd2tsv --iah -o 6 --ip --ave-dates dates.txt

    Get hourly data for DFW for 2019, accounting for DST:
    isd2tsv --dfw --year 2019 -o 6 --hourly --dst

Formats:

    Hourly columns:
        1: Year
        2: Month
        3: Day
        4: Hour (0-23)
        5: Minute (0-59)
        6: Dry-bulb temperature (°C/°F)
        7: Dew-point temperature (°C/°F)
        8: Relative humidity (%)
        9: Atmospheric pressure (Pa/psi)
        10: Wind direction (°)
        11: Wind speed (m/s or mph)
        12: Total cloud cover (0-10)
"""

def parse_iso_date(date_str: str) -> int:
    # Parse to rd_date
    year = int(date_str[0:4])
    month = int(date_str[5:7])
    day = int(date_str[8:10])

    return mputils.fixed_from_gregorian(year, month, day)


def main():
    usaf = None
    wban = None
    year = None
    offset = None
    epw = None
    tsv = None

    fmt = None

    hourly = None
    minute_interval = 60

    header = False

    cloud_coverage = None
    solar_data_file = None

    ip = False
    dst = False

    single_col_fmt = False

    average_temps_cmd = False
    date_file = None

    datetime_format = None

    idx = 1
    while idx < len(sys.argv):
        a = sys.argv[idx]
        if a == "-h" or a == "--help":
            print(help_text())
            sys.exit(0)

        elif a == "-u" or a == "--usaf":
            if idx + 1 >= len(sys.argv):
                print("Error: no USAF code given", file=sys.stderr)
                sys.exit(1)

            usaf = sys.argv[idx + 1]
            idx += 2

        elif a == "-w" or a == "--wban":
            if idx + 1 >= len(sys.argv):
                print("Error: no WBAN code given", file=sys.stderr)
                sys.exit(1)

            wban = sys.argv[idx + 1]
            idx += 2

        elif a == "-y" or a == "--year":
            if idx + 1 >= len(sys.argv):
                print("Error: no year given", file=sys.stderr)
                sys.exit(1)

            try:
                year = int(sys.argv[idx + 1])
            except ValueError:
                print(f"Error: {sys.argv[idx + 1]} is not a valid year", file=sys.stderr)
                sys.exit(1)

            idx += 2

        elif a == "-o" or a == "--offset":
            if idx + 1 >= len(sys.argv):
                print("Error: no offset given", file=sys.stderr)
                sys.exit(1)

            try:
                offset = int(sys.argv[idx + 1])
            except ValueError:
                print(f"Error: {sys.argv[idx + 1]} is not a valid offset", file=sys.stderr)
                sys.exit(1)

            idx += 2

        elif a == "--dfw": # Shortcut for my location
            usaf = "722590"
            wban = "03927"
            offset = -6
            idx += 1

        elif a == "--iah": # Shortcut for Houston (IAH George Bush)
            usaf = "722430"
            wban = "12960"
            offset = -6
            idx += 1

        elif a == "--hou": # Shortcut for Houston (HOU Hobby)
            usaf = "722440"
            wban = "12918"
            offset = -6
            idx += 1

        elif a == "--epw":
            epw = True
            idx += 1
        elif a == "--tsv":
            tsv = True
            idx += 1
        elif a == "--cc":
            cloud_coverage = True
            idx += 1
        elif a == "--fmt":
            fmt = True
            idx += 1
        elif a == "--solar":
            # Read next argument as path to solar data file
            if idx + 1 >= len(sys.argv):
                print("Error: no solar data file given", file=sys.stderr)
                sys.exit(1)

            solar_data_file = sys.argv[idx + 1]
            idx += 2
        elif a == "--hourly":
            hourly = True
            idx += 1
        elif a == "-1":
            single_col_fmt = True
            idx += 1
        elif a == "--interval":
            hourly = True
            if  idx + 1 >= len(sys.argv):
                print(f"Error: no minute interval given after {a}", file=sys.stderr)
                sys.exit(1)
            try:
                minute_interval = int(sys.argv[idx + 1])
            except ValueError:
                print(f"Error: {sys.argv[idx + 1]} is not a valid minute interval", file=sys.stderr)
                sys.exit(1)
            idx += 2
        elif a == "--ip":
            ip = True
            idx += 1
        elif a == "--iso":
            datetime_format = "%Y-%m-%d %H:%M"
            idx += 1
        elif a == "--format":
            if idx + 1 >= len(sys.argv):
                print("Error: no format given", file=sys.stderr)
                sys.exit(1)

            datetime_format = sys.argv[idx + 1]
            idx += 2
        elif a == "--dst":
            dst = True
            idx += 1
        elif a == "--header" or a == "--headers":
            header = True
            idx += 1
        elif a == "--ave-dates":
            average_temps_cmd = True
            if idx + 1 >= len(sys.argv):
                print("Error: no date file given", file=sys.stderr)
                sys.exit(1)
            idx += 1
            date_file = sys.argv[idx]
            idx += 1
            # averages(date_file)
        elif a == "--ave":
            average_temps_cmd = True
            idx += 1
        else:
            print(f"Error: unknown argument {a}", file=sys.stderr)
            sys.exit(1)

    if usaf is None:
        print("Error: no USAF code given", file=sys.stderr)
        sys.exit(1)

    if wban is None:
        print("Error: no WBAN code given", file=sys.stderr)
        sys.exit(1)

    if average_temps_cmd:
        handle_avg_temp_cmd(date_file, usaf, wban, offset, ip, dst)
        sys.exit(0)

    # Year is required for all other commands
    if year is None:
        print("Error: no year given", file=sys.stderr)
        sys.exit(1)

    if epw:
        print(f"Converting to epw for year {year}", file=sys.stderr)
        if offset is None:
            print("Error: no offset given", file=sys.stderr)
            sys.exit(1)

        lines = convert_to_epw(usaf, wban, year, offset)
        for line in lines:
            print(line)

    elif tsv:
        contents = get_year_utilizing_cache(usaf, wban, year)
        lines = parse_isd_file_2(contents)

        print(lines[0].tsv_header())
        for line in lines:
            print(line.tsv_line())

    elif single_col_fmt:
        print_single_col_fmt(usaf, wban, year, ip, offset, dst)

    elif cloud_coverage:
        # Check for offset
        if offset is None:
            print("Error: no offset given", file=sys.stderr)
            sys.exit(1)

        lines = convert_to_epw(usaf, wban, year, offset)
        for line in lines:
            split_line = line.split(",")
            print(split_line[22])

    elif fmt:
        if offset is None:
            print("Error: no offset given", file=sys.stderr)
            sys.exit(1)

        if solar_data_file is None:
            print("Error: no solar data file given", file=sys.stderr)
            sys.exit(1)

        # output_epw.append((y, mon, d, h, m, toa, tdp, relative_humidity, press, wind_dir, wind_speed, total_cloud_cover))
        lines = hourly_year(usaf, wban, year, offset)

        # open solar file
        solar_data = []
        with open(solar_data_file, 'r') as f:
            for line in f:
                solar_data.append(line.split("\t"))

        # Make sure solar data and lines are same length
        if len(solar_data) != len(lines):
            print("Error: solar data and lines are not the same length", file=sys.stderr)
            sys.exit(1)

        for i in range(len(lines)):
            line = lines[i]

            month = line[1]
            day = line[2]
            hour = line[3]
            # minute = line[4]
            tdb_c = line[5]
            # tdp_c = line[6]
            rh = line[7]
            press_pa = line[8]
            wind_dir = line[9]
            wind_speed_mps = line[10]
            cloud_cover = line[11]

            tdb_f = tdb_c * 9 / 5 + 32
            # tdp_f = tdp_c * 9 / 5 + 32

            w = psy.w_from_tdb_rh(tdb_c, rh)

            twb = psy.twb_from_tdb_w(tdb_f, w)

            press_in_hg = press_pa / 3386.3886

            air_density = psy.air_density_from_toa_w(tdb_f, w)

            enthalpy = psy.h_from_tdb_w(tdb_f, w)

            wind_dir_0_to_15 = int(round(wind_dir % 16))

            wind_speed_knots = wind_speed_mps * 1.9438445

            solar_data_line = solar_data[i]

            total_horizontal = float(solar_data_line[0])
            direct_normal = float(solar_data_line[1])

            doe2line = Doe2Record(month, day, hour, twb, tdb_f, press_in_hg, cloud_cover, 0, 0, wind_dir_0_to_15, w, air_density, enthalpy, total_horizontal, direct_normal, 0, wind_speed_knots)

            # assert that line is 78 characters
            assert len(doe2line.to_fixed_line()) == 78

            print(doe2line.to_fixed_line())

    elif hourly:
        if offset is None:
            print("Error: no offset given", file=sys.stderr)
            sys.exit(1)

        lines = hourly_year(usaf, wban, year, offset, ip, dst, minute_interval, datetime_format)

        if header:
            if datetime_format is None:
                headers = ["Year", "Month", "Day", "Hour", "Minute"]
            else:
                headers = ["Timestamp"]

            if ip:
                headers.extend(["Outdoor Air Temperature (°F)", "Dew Point Temperature (°F)", "Relative Humidity (%)", "Atmospheric Station Pressure (psi)", "Wind Direction (0-360)", "Wind Speed (mph)", "Total Sky Cover (tenths)"])
            else:
                headers.extend(["Outdoor Air Temperature (°C)", "Dew Point Temperature (°C)", "Relative Humidity (%)", "Atmospheric Station Pressure (Pa)", "Wind Direction (0-360)", "Wind Speed (m/s)", "Total Sky Cover (tenths)"])

            print(*headers, sep='\t')

        def format_float(f) -> str:
            if f is None:
                return ""
            else:
                return str(f)

        for line in lines:
            fields = [format_float(f) for f in line]
            try:
                print("\t".join(fields))
            except BrokenPipeError:
                sys.exit(0)

    else:
        contents = get_isd_file_contents_http(usaf, wban, year)
        lines = parse_isd_file_2(contents)
        print(contents, end='')


if __name__ == "__main__":
    main()
