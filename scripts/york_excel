#!/usr/bin/awk -E
BEGIN {
    # Check that the number of arguments is correct.
    # Need arguments for the following:
    # - wetbulb
    # - r
    # - lg
    # @h b (e exponent) use_exponent s (w wetbulb) wetbulb "wetbulb" s (r) r "r" s (l lg) lg "lg"
    help = 0
    use_exponent = 0
    wetbulb = "wetbulb"
    r = "r"
    lg = "lg"

    idx = 0

    print ARGC

    while (idx < ARGC) {
        if (ARGV[idx] == "-h" || ARGV[idx] == "--help")
        {
            help = 1
            ARGV[idx] = ""
            idx++;
        }
        else if (ARGV[idx] == "-e" || ARGV[idx] == "--exponent")
        {
            use_exponent = 1
            print "Got here"
            ARGV[idx] = ""
            idx++;
        }
        else if (ARGV[idx] == "-w" || ARGV[idx] == "--wetbulb")
        {
            if (idx + 1 >= ARGC) print("Expected string argument after" ARGV[idx])
            wetbulb = ARGV[idx + 1]
            print "Got here"
            ARGV[idx] = ""
            ARGV[idx + 1] = ""
            idx += 2;
        }
        else if (ARGV[idx] == "-r")
        {
            if (idx + 1 >= ARGC) print("Expected string argument after" ARGV[idx])
            r = ARGV[idx + 1]
            ARGV[idx] = ""
            ARGV[idx + 1] = ""
            idx += 2;
        }
        else if (ARGV[idx] == "-l" || ARGV[idx] == "--lg")
        {
            if (idx + 1 >= ARGC) print("Expected string argument after" ARGV[idx])
            lg = ARGV[idx + 1]
            ARGV[idx] = ""
            ARGV[idx + 1] = ""
            idx += 2;
        }
        else {
            idx++
        }
    }

    if (help) {
        print("Usage: " ARGV[0] " [options] <input_file> <output_file>")
        print("Options:")
        print("  -h, --help: Print this help message.")
        print("  -e, --exponent: Use the exponent of the wetbulb temperature.")
        print("  -w, --wetbulb: Specify the name of the wetbulb temperature column.")
        print("  -r: Specify the name of the relative humidity column.")
        print("  -l, --lg: Specify the name of the liquid water content column.")

        exited_early = 1
        exit 1
    }

    # if (ARGC < 4) {
        # print "Usage: york_excel <wetbulb> <r> <lg>"
        # print "Requires 3 arguments, received " ARGC
        # exited_early = 1
        # exit 1
    # }

    # # Set the variables.
    # wetbulb = ARGV[1]
    # r       = ARGV[2]
    # lg      = ARGV[3]
    # ARGV[1] = ""
    # ARGV[2] = ""
    # ARGV[3] = ""
}

NR <= 27 {
    coeffs[NR] = $1
}

END {
   if (exited_early) { exit }

   if (use_exponent) {

       for (lg_exp = 0; lg_exp <= 2; lg_exp++) {
           for (r_exp = 0; r_exp <=2; r_exp++) {
               for (wb_exp = 0; wb_exp <= 2; wb_exp++) {
                   coeff_index = lg_exp * 9 + r_exp * 3 + wb_exp + 1
                   coeff = coeffs[coeff_index]
                   # Clear array
                   split("", items)

                   item_count = 0
                   if (lg_exp == 1) items[++item_count] = lg
                   else if (lg_exp == 2) items[++item_count] = lg "^2"

                   if (r_exp == 1) items[++item_count] = r
                   else if (r_exp == 2) items[++item_count] = r "^2"

                   if (wb_exp == 1) items[++item_count] = wetbulb
                   else if (wb_exp == 2) items[++item_count] = wetbulb "^2"

                   if (item_count == 0) term[coeff_index] = coeff
                   else if (item_count == 1) term[coeff_index] = sprintf("%s*%s", coeff, items[1])
                   else if (item_count == 2) term[coeff_index] = sprintf("%s*%s*%s", coeff, items[1], items[2])
                   else if (item_count == 3) term[coeff_index] = sprintf("%s*%s*%s*%s", coeff, items[1], items[2], items[3])
               }
           }
       }
    }
    else {
        term[1]  = sprintf("%f",  coeffs[1])
        term[2]  = sprintf("%s*%s",  coeffs[2] ,  wetbulb)
        term[3]  = sprintf("%s*%s*%s",  coeffs[3] ,  wetbulb ,  wetbulb)
        term[4]  = sprintf("%s*%s",  coeffs[4] ,  r)
        term[5]  = sprintf("%s*%s*%s",  coeffs[5] ,  wetbulb ,  r)
        term[6]  = sprintf("%s*%s*%s*%s",  coeffs[6] ,  wetbulb ,  wetbulb ,  r)
        term[7]  = sprintf("%s*%s*%s",  coeffs[7] ,  r ,  r)
        term[8]  = sprintf("%s*%s*%s*%s",  coeffs[8] ,  wetbulb ,  r ,  r)
        term[9]  = sprintf("%s*%s*%s*%s*%s",  coeffs[9] ,  wetbulb ,  wetbulb ,  r ,  r)
        term[10] = sprintf("%s*%s",  coeffs[10] ,  lg)
        term[11] = sprintf("%s*%s*%s",  coeffs[11] ,  wetbulb ,  lg)
        term[12] = sprintf("%s*%s*%s*%s",  coeffs[12] ,  wetbulb ,  wetbulb ,  lg)
        term[13] = sprintf("%s*%s*%s",  coeffs[13] ,  r ,  lg)
        term[14] = sprintf("%s*%s*%s*%s",  coeffs[14] ,  wetbulb ,  r ,  lg)
        term[15] = sprintf("%s*%s*%s*%s*%s",  coeffs[15] ,  wetbulb ,  wetbulb ,  r ,  lg)
        term[16] = sprintf("%s*%s*%s*%s",  coeffs[16] ,  r ,  r ,  lg)
        term[17] = sprintf("%s*%s*%s*%s*%s",  coeffs[17] ,  wetbulb ,  r ,  r ,  lg)
        term[18] = sprintf("%s*%s*%s*%s*%s*%s",  coeffs[18] ,  wetbulb ,  wetbulb ,  r ,  r ,  lg)
        term[19] = sprintf("%s*%s*%s",  coeffs[19] ,  lg ,  lg)
        term[20] = sprintf("%s*%s*%s*%s",  coeffs[20] ,  wetbulb ,  lg ,  lg)
        term[21] = sprintf("%s*%s*%s*%s*%s",  coeffs[21] ,  wetbulb ,  wetbulb ,  lg ,  lg)
        term[22] = sprintf("%s*%s*%s*%s",  coeffs[22] ,  r ,  lg ,  lg)
        term[23] = sprintf("%s*%s*%s*%s*%s",  coeffs[23] ,  wetbulb ,  r ,  lg ,  lg)
        term[24] = sprintf("%s*%s*%s*%s*%s*%s",  coeffs[24] ,  wetbulb ,  wetbulb ,  r ,  lg ,  lg)
        term[25] = sprintf("%s*%s*%s*%s*%s",  coeffs[25] ,  r ,  r ,  lg ,  lg)
        term[26] = sprintf("%s*%s*%s*%s*%s*%s",  coeffs[26] ,  wetbulb ,  r ,  r ,  lg ,  lg)
        term[27] = sprintf("%s*%s*%s*%s*%s*%s*%s",  coeffs[27] ,  wetbulb ,  wetbulb ,  r ,  r ,  lg ,  lg)

    }


    for (i = 1; i <= 27; i++) {
        if (i == 1) {
            printf "%s", term[i]
        } else if (i % 3 == 0) {
            printf "\n"
            printf "(%s)", term[i]
        }
        else {
            printf " + (%s)", term[i]
        }
    }
}
