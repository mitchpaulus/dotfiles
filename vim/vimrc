" Plugins {{{1
set nocompatible  " be iMproved, required for Vundle

" Automatically pull vim-plug if required. From
" https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
if has('unix')
    if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
      silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
endif

call plug#begin()

Plug 'altercation/vim-colors-solarized'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'godlygeek/tabular'
Plug 'lervag/vimtex'
Plug 'qpkorr/vim-bufkill'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'sickill/vim-monokai'
" Plug 'SirVer/ultisnips'
Plug 'sjl/gundo.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'mboughaba/i3config.vim'
Plug 'leafgarland/typescript-vim'
Plug 'arcticicestudio/nord-vim'
Plug 'mitchpaulus/energyplus-vim'

call plug#end()

if has('unix')
    let g:UltiSnipsSnippetDir = "~/.vim/UltiSnips"
endif

if has('win32')
    let g:UltiSnipsSnippetDir = "~/vimfiles/UltiSnips"
    let g:UltiSnipsSnippetDirectories = [$HOME.'/vimfiles/UltiSnips', 'UltiSnips']
endif
let g:UltiSnipsUsePythonVersion = 3

nnoremap <leader>ue :UltiSnipsEdit<cr>

" General Mappings {{{1
" Use space key for leader, but actually use default leader so it shows up in
" status bar.
map <Space> <Leader>
let maplocalleader=","
" Fast saving, but use update not write.
noremap <Leader>w :update<CR>
" For when I hold the shift key too long
command W w
" Fast quitting
noremap <leader>q :q<cr>

nnoremap Q :q<CR>
nnoremap <leader>q :q<CR>
" Really quit
noremap <leader>Q :q!<cr>
" [Y]ank entire file to clipboard.
nnoremap <leader>y :<c-u>%yank *<cr>
" [Y]ank [l]ine without newlines
nnoremap yl ^y$
" [D]elete [l]ine without newlines
nnoremap dl ^d$
" [C]hange [l]ine without newlines
nnoremap cl ^c$
" Insert [t]oday's [d]ate
nnoremap <leader>td i<c-r>=strftime("%Y-%m-%d")<cr>
" Insert today's c-[d]ate
inoremap <c-d> <c-r>=strftime("%Y-%m-%d")<cr>
" Insert today's date, never used ctrl-t in command mode.
cnoremap <c-t> <c-r>=strftime("%Y-%m-%d")<cr>
" Insert today's date with the day of the week
inoremap <localleader>t <c-r>=strftime("%A %Y-%m-%d")<cr>
" stay on current search
nnoremap * *N

" Copy to clipboard in visual mode
xnoremap <leader>y "*y

" Checktime of the file
nnoremap <leader>ct :<C-u>checktime<cr>

" Compile Pandoc
nnoremap <leader>pc :silent !pandoc -o %:p:r.pdf %:p<cr>

" Terminal mode, see pg. 73 Modern Vim
if has('nvim')
    tnoremap jf <C-\><C-n>
    tnoremap <C-v>jk jk
    tnoremap <Esc> <C-\><C-n>
    tnoremap <C-v><Esc> <Esc>
endif


" From Vimscript the Hard Way chap 15
onoremap p i(
onoremap in( :<c-u>execute "normal! /(\r:nohlsearch\rvi("<cr>
onoremap il( :<c-u>execute "normal! ?(\r:nohlsearch\rvi("<cr>
vnoremap p i(

onoremap b i{
onoremap in{ :<c-u>execute "normal! /{\r:nohlsearch\rvi{"<cr>
onoremap inb :<c-u>execute "normal! /{\r:nohlsearch\rvi{"<cr>
onoremap il{ :<c-u>execute "normal! ?{\r:nohlsearch\rvi{"<cr>
onoremap ilb :<c-u>execute "normal! ?{\r:nohlsearch\rvi{"<cr>
vnoremap b i{

" From https://vi.stackexchange.com/a/15233/10847
onoremap if :<C-u>normal! [zV]z<CR>
xnoremap if [zo]z


" Copy file to clipboard (d for duplicate)
nnoremap <leader>d ggVG"*y

" Visually select inside latex table cell, first go back to last
" & or beginning of line, mark to s, then go to next & or end of line \\
" then go to the end of the previous word, visually select back to
" original mark.
vnoremap tc v?^\<bar>&<cr>wms/&\<bar>\\\\<cr>:nohlsearch<cr>gEv`s
onoremap tc :<c-u>execute 'normal! ?^\<bar>&' . "\r" . 'wms/&\<bar>\\\\' . "\r:nohlsearch\rgEv`s"<cr>

" Change paste settings
nnoremap <leader>sp :<c-u>set paste!<cr>:set paste?<cr>

" Quickly change present working directory to
" the current files directory.
nnoremap <leader>pw :<c-u>call <SID>ChangePWD()<cr>

function! s:ChangePWD()
    cd %:p:h
    pwd
endfunction

"Make it easy to edit the vimrc file. From
"http://learnvimscriptthehardway.stevelosh.com/chapters/07.html.
nnoremap <leader>ev :split $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" [e]dit [t]ikz plugin.
nnoremap <leader>et :vsplit ~/vimfiles/bundle/latex-plus/ftplugin/tex.vim<cr>
"
"[C]lear [W]hitespace at End of Line
nnoremap <leader>cw :%s/\v\s+$//<cr>
"Default searches to be very magic and case-insensitive
"nnoremap / /\v

" These mappings are for VisualStudio Vim in order to get correct indentation.
nnoremap S ddO
nnoremap cc S

nnoremap [q :cprevious<CR>
nnoremap ]q :cnext<CR>
nnoremap [Q :cfirst<CR>
nnoremap ]Q :clast<CR>

nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>

"Mapping to make current word in insert/normal mode capitalized. See Modal Mapping Vimscript the Hard Way.
"inoremap <leader><c-u> <esc>hviwUea
nnoremap <leader><c-u> viwU

cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <C-a> <C-b>

"Use jk to escape insert mode. Suggested here:
"http://learnvimscriptthehardway.stevelosh.com/chapters/10.html
"inoremap jk <esc>
" Now switching to jf for a few reasons:
" 1. jk stills causes some RSI problems
" 2. df and fd were annoying since there are many words that end with
"    either of those characters. The biggest offender was f in if statements.
" 3. j is the best leader character, since almost no words end with that.
" 4. So jf splits the duty between both hands using strong pointer finger.
inoremap jf <esc>
inoremap <F9> <C-r>*

noremap <TAB> <PageDown>zz
noremap <S-TAB> <PageUp>zz

" Quick mappings for the beginning and ends of lines
noremap H ^
noremap L $

" Want ctrl-backspace to delete whole word in insert mode
inoremap <C-BS> <C-W>

xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>

"Clear the previous search (c[lear] h[ighlight])
nnoremap <leader>ch :nohlsearch<cr>

nnoremap <leader>ss :set spell!<cr>:echo "Spell is now " . &spell<cr>
" Flip background color setting, from http://tilvim.com/2013/07/31/swapping-bg.html.
nnoremap <leader>bg :let &background = ( &background == "dark"? "light" : "dark" )<CR>

" Switch the setting of the [sh]ell slash setting.
nnoremap <leader>sh :<c-u>call <SID>SwitchShellSlash()<CR>

function! s:SwitchShellSlash()
    if &shellslash == 0
        set shellslash
    else
        set noshellslash
    endif
    echo "shellslash setting is now " . &shellslash
endfunction


" Switch setting for [t]ext [w]idth.
nnoremap <leader>tw :<c-u>call <SID>ChangeTextWidth()<CR>

function! s:ChangeTextWidth()
    let &textwidth = ( &textwidth == 0 ? 72 : 0 )
    echo "textwidth is now " . &textwidth
endfunction


"These mappings are for moving around the windows quickly.
nnoremap <C-h> <c-w>h
nnoremap <C-j> <c-w>j
nnoremap <C-k> <c-w>k
nnoremap <C-l> <c-w>l

" From pg. 81 Modern Vim
if has('nvim')
    tnoremap <M-h> <C-\><c-n><c-w>h
    tnoremap <M-j> <C-\><c-n><c-w>j
    tnoremap <M-k> <C-\><c-n><c-w>k
    tnoremap <M-l> <C-\><c-n><c-w>l
endif

nnoremap <c-c> <c-w>c
 " Delete buffer using the qpkorr/vim-bufkill package.
nnoremap <c-d> :BD<cr>
 " Move backwards in spell check. T is 'backwards til' and I never use it.
nnoremap T [s
nnoremap <kPlus> <c-w>+
nnoremap <kMinus> <c-w>-

nnoremap <c-n> :bn<cr>

" Screen gets messed up in WSL when maximizing.
nnoremap <leader>r :redraw!<cr>

" Emulate bash in insert mode.
inoremap <c-e> <c-o>$
inoremap <c-a> <c-o>^
" nnoremap <leader>j <c-w>j
" nnoremap <leader>k <c-w>k

inoremap <localleader>df Â°F

" Filename completion
inoremap <C-F> <C-X><C-F>
" CTRL-Space is often translated by terminals to CTRL-@. When typing fast,
" CTRL-N followed by space, often catches the CTRL key too long and then
" you get whole nother copy of the last insert. I rarely find myself using
" the CTRL-@ mapping, so I don't think this should be a big deal to NOP.
" See:
" https://en.wikipedia.org/wiki/Control_character#How_control_characters_map_to_keyboards
" https://stackoverflow.com/a/7725796/5932184
" https://github.com/microsoft/terminal/issues/2865
imap <C-@> <Nop>

" Since ` is used as prefix in tmux, this lets me put in ` without having to
" double the keystrokes.
inoremap <F1> `
inoremap <F2> ```
inoremap <F3> ``<Left>
inoremap <F4> ```<CR><CR>```<Esc>kI

" This allows you to escape out of quotes, braces, etc. and then append
" at the end of the current line.
execute "inoremap <C-L> <Esc>A"

" Take first spelling suggestion
nnoremap <F1> 1z=
nnoremap <F2> :<C-u>update<CR>
nnoremap <F4> ZZ
nnoremap <F8> :<c-u>set paste!<cr>:set paste?<cr>
nnoremap <F9> :<C-u>set paste<CR>"*p:set nopaste<CR>
nnoremap <F10> :<C-u>set paste<CR>"*P:set nopaste<CR>

" Open and close parenthesis. Idea from:
" http://xahlee.info/kbd/best_way_to_insert_brackets.html
inoremap <C-j> ()<Left>

" General Settings/Options {{{1
"Custom Status Line

let g:basestatusline='%.50F%=%y,C:%c,%p%%,HEX:%B,%{&ff},%{&encoding}'

set statusline=%!g:basestatusline
set hlsearch   " highlight search
set incsearch  " highlight temporary searches
set rnu        " Relative line numbering
set number     " Show the current line number
set nocursorline
set encoding=utf-8
set backspace=indent,eol,start " Want backspaces to always work as normal.
set scrolloff=2                " Want two lines above and below cursor when scrolling.
set smartcase                  " Use smartcase
set laststatus=2               " Always show the statusbar
set nowrap                     " No word wrap.
set lbr                        " Want line breaks at whitespace
set tabstop=4                  " show existing tab with 4 spaces width
set shiftwidth=4               " when indenting with '>', use 4 spaces width
set expandtab                  " On pressing tab, insert 4 spaces
set cmdheight=2                " Make the command window height 2 to avoid the hit-enter prompts
set history=1000               " Remember up to 1000 ex commands.
set lazyredraw
set ttyfast
set spelllang=en_us
set spellsuggest=10
set hidden
set mouse=a

set sessionoptions=buffers,curdir,winpos,winsize
set nolist
set listchars=tab:â¸\ ,eol:Â¬
set guioptions-=e
set guioptions-=L
set guioptions-=R

if has('win32')
    set directory^=$HOME/vimfiles/tmp//
elseif has('unix')
    set directory^=$HOME/.vim/tmp//
endif
set noswapfile

" Don't try to highlight lines longer than 100 chars (from sjl)
set synmaxcol=200

if has('gui_running')
    set lines=9999                 " Show 75 lines on default opening.
    set columns=110                " Show 90 columns on default opening.
endif

if &term =~? '256color'
    " set t_ut=
endif

" Set spellfile for custom words. Originally just started as
" HVAC related words, but turned into everything.
if has('win32')
    set spellfile=~\vimfiles\spell\hvac.utf-8.add
elseif has('unix')
    set spellfile=~/.vim/spell/hvac.utf-8.add
endif

if has("gui_running")
  if has("gui_gtk2")
    set guifont=Inconsolata\ 12
  elseif has("gui_gtk3")
    set guifont=Inconsolata\ 12
  elseif has("gui_macvim")
    set guifont=Menlo\ Regular:h14
  elseif has("gui_win32")
    set guifont=Fira_Code_Retina:h10:cANSI:qDRAFT,Consolas:h11:cANSI
    set renderoptions=type:directx
    set encoding=utf-8
  endif
endif


" A sane user does not use these characters in filenames
set isfname-={
set isfname-=}
set isfname-==

set wildignore+=*.aux*
set wildignore+=*.asv
set wildignore+=*.log
set wildignore+=*.swp
set wildignore+=*.nav
set wildignore+=*.toc
set wildignore+=*.out
set wildignore+=*.fdb_latexmk
set wildignore+=*.blg
set wildignore+=*.fls
set wildignore+=*.xdv
set wildignore+=*.bbl
set wildignore+=*.snm
set wildignore+=*.lof
set wildignore+=*.lot
set wildignore+=*.dvi
set wildignore+=*.tmp
set wildignore+=*.synctex.gz
set wildignore+=*/node_modules/*
set wildignore+=*/.git/*
set wildignore+=*/venv/*

set noshellslash

" Plugin Specific Options {{{1

" NERDTree {{{2
" NERDTree Settings
" Open up nerd tree quickly.
nnoremap <leader>n :NERDTree<cr>
let NERDTreeIgnore=['\.aux.*$','\.fls$','\.lof$','\.toc$','\.out$','\.vrb$','\.nav$','\.snm$','\.bbl$','\.bib','\.fdb_latexmk$','\.xdv','\.gif','\.pdf','\~$','\.blg$','\.lot$']



" Gundo {{{2
" Gundo Options. New versions of GVIM don't have
" original python support.
if has('python3')
    let g:gundo_prefer_python3 = 1
endif
" Open up the undo tree.
nnoremap <F5> :<c-u>GundoToggle<cr>

"Tabular {{{2
"Tabular mapping to format table
" aligning on & and \\ at the end of the line.
" See http://stackoverflow.com/questions/19414193/regex-extract-string-not-between-two-brackets
vnoremap <leader>tf :<c-u>'<,'>Tab /[^\\]\zs&\<Bar>\({[^}{]*\)\@<!\(\\\\\)\([^{}]*}\)\@!/<cr>
nnoremap <leader>tf :<c-u>Tab /[^\\]\zs&\<Bar>\({[^}{]*\)\@<!\(\\\\\)\([^{}]*}\)\@!/<cr>
nnoremap <leader>t<Bar> :Tab /<Bar>/<cr>

" Fugitive {{{2
" Fugitive mappings for status, add, and commit.
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>ga :Gwrite<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gph :Gpush<cr>
nnoremap <leader>gpl :Gpull<cr>

" Search for the current visual selection using '*'. See pg. 212 of Practical Vim
function! s:VSetSearch()
    let temp = @s
    norm! gv"sy
    let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
    let @s = temp
endfunction

syntax enable

try
    if has('gui_running')
        let g:solarized_termcolors=256
        let g:solarized_termtrans=0
        silent! colorscheme solarized
        "colorscheme monokai
    else
        colorscheme sensible
    endif
catch
    colorscheme desert
endtry

" Vimtex {{{2
"For vimtex
filetype plugin indent on
let g:vimtex_view_enabled = 0
let g:tex_flavor="latex"
let g:vimtex_quickfix_latexlog = {'overfull': 0, 'underfull':0}
let g:vimtex_compiler_latexmk = {
            \ 'backend' : 'jobs',
            \ 'background' : 1,
            \ 'build_dir' : '',
            \ 'callback' : 1,
            \ 'continuous' : 1,
            \ 'executable' : 'latexmk',
            \ 'options' : [
            \   '-pdf',
            \   '-verbose',
            \   '-file-line-error',
            \   '-synctex=0',
            \   '-interaction=nonstopmode',
            \ ],
            \}
"
" Ctrl-P {{{2
" For CTRL-P
let g:ctrlp_mruf_exclude = '.*log\|.*aux\|.*tmp\|.*\\.git\\.*' " Windows
let g:ctrlp_mruf_max = 250

let g:ctrlp_custom_ignore = { 'file': '\.\(pdf\|png\|PNG\)$' }
let g:ctrlp_by_filename = 1
" Chose <c-y> because it is analogous to ctrl-p but with the pointer
" finger
nnoremap <c-y> :CtrlPBuffer<cr>
" Chose <c-u> for most recently [u]sed
nnoremap <c-u> :CtrlPMRU<cr>

" autoignore extensions allows for a .ctrlpignore file, acts like .gitignore
let g:ctrlp_extensions = ['autoignore']

" NERDCommenter {{{2

let g:NERDCustomDelimiters = { "idf": { 'left': '!' } }

" MISC {{{1

"This is to make sure that when you first enter a file
"you don't get a whole bunch of highlighting.
nohlsearch

" FileType AutoCmd Mappings {{{1
function! s:MakeHeading(replaceCharacter)
    let previousSearch=@/
    "echom ":s/\\s\\+$//e\rVypVr".a:replaceCharacter.":noh\r"
    silent execute "normal! :s/\\s\\+$//e\rVypVr".a:replaceCharacter
    let @/=previousSearch
endfunction

function! s:CleanBibFile()
    %g/month\s*=/d
    %g/file\s*=/d
    %g/doi\s*=/d
    %g/issn\s*=/d
    %g/keywords\s*=/d
    %g/url\s*=/d
    %g/mendeley-groups\s*=/d
    %s/title\s*=\s*{\s*{\(.*\)}\s*}/title = {\1}/
endfunction

nnoremap <leader>j /<++><cr>cgn
"inoremap <c-j> <esc>/<++><cr>:nohlsearch<cr>cgn

let g:AutocorrectFiletypes = ["markdown", "tex", "text","gitcommit"]

augroup filetypemappings
autocmd!
" make a header 1 line, deleting trailing whitespace first.
autocmd FileType markdown nnoremap <silent> <leader>h1 :<c-u>call <SID>MakeHeading("=")<cr>
autocmd FileType markdown nnoremap <silent> <leader>h2 :<c-u>call <SID>MakeHeading("-")<cr>
autocmd FileType markdown,tex,text setlocal textwidth=72
autocmd FileType markdown,tex,text setlocal spell
autocmd FileType help nnoremap <leader>hh mnA~<esc>`n
autocmd FileType help nnoremap <leader>hl mn78i=<esc>`n
autocmd FileType help setlocal nospell
autocmd FileType tex inoremap %%% \%
autocmd FileType tex nnoremap [e ?\\begin{equation}<cr>:nohlsearch<cr>
autocmd FileType tex nnoremap ]e /\\begin{equation}<cr>:nohlsearch<cr>
autocmd FileType bib command! CleanBib call <SID>CleanBibFile()
autocmd FileType gnuplot nnoremap <localleader>g :silent !gnuplot.exe % && start "Plot" %:p:r.png<cr>
autocmd FileType gnuplot nnoremap <localleader>k :silent !taskkill.exe /IM Microsoft.Photos.exe /F<cr>
autocmd FileType gnuplot inoremap ,hist <esc>:0read ~/.vim/snipfiles/hist.gnuplot<cr>
" Quickly enter in Â² symbol
autocmd FileType markdown,text inoremap ^2 <c-v>178
autocmd FileType markdown,text inoremap ,l [](<++>)<esc>6hi
" Quickly enter in Â°F
autocmd FileType markdown,text inoremap DEGF Â°F

autocmd FileType gitcommit setlocal spell

autocmd FileType html inoremap ,1 <h1></h1><Esc>4hi
autocmd FileType html inoremap ,2 <h2></h2><Esc>4hi
autocmd FileType html inoremap ,3 <h3></h3><Esc>4hi
autocmd FileType html inoremap ,a <a href=""></a><Esc>5hi
autocmd FileType html inoremap ,b data-bind=""<Left>
autocmd FileType html inoremap ,c class=""<Left>
autocmd FileType html inoremap ,d <div></div><Esc>5hi
autocmd FileType html inoremap ,i <input  /><Esc>2hi
autocmd FileType html inoremap ,l <label></label><Esc>7hi
autocmd FileType html inoremap ,p <lt>p></p><Esc>3hi
autocmd FileType html inoremap ,sp <span></span><Esc>6hi
autocmd FileType html inoremap ,st <style></style><Esc>7hi
autocmd FileType html inoremap ,u <ul><cr><li></li><cr></ul><Esc>k^f>a

autocmd FileType javascript,typescript inoremap ,f function (<++>) {<cr><++><cr>}<Esc>2k^f(i
" )
autocmd FileType javascript,typescript inoremap ,> () =><Space>

autocmd FileType typescript nnoremap <leader>tc :<c-u>!tsc<cr>

autocmd FileType tex inoremap ,eq \begin{equation}<cr><cr>\end{equation}<esc>ki    <esc>i
autocmd FileType tex inoremap ,bf \textbf{} <++><esc>5hi
autocmd FileType tex inoremap ,lr \left(\right) <++><esc>11hi
autocmd FileType tex inoremap ,u _{} <++><esc>5hi
autocmd FileType tex inoremap ,s ^{} <++><esc>5hi
autocmd FileType tex inoremap ,fr \frac{}{<++>} <++><esc>11hi
autocmd FileType tex inoremap ,dot \dot{} <++><esc>5hi
autocmd FileType tex inoremap ,tx \text{} <++><esc>5hi
autocmd FileType tex inoremap ,p \usepackage{}<esc>i
autocmd FileType tex inoremap ,co \newcommand{\}{<++>}<esc>6hi
autocmd FileType tex inoremap ,en \begin{enumerate}<cr><cr>\end{enumerate}<esc>ki    <esc>i
autocmd FileType tex inoremap ,base <esc>:0read ~/.vim/snipfiles/base.tex<cr>
autocmd FileType tex inoremap ,i \item <esc>a
autocmd FileType tex inoremap ,tab \begin{tabular}{}<cr><++><cr>\end{tabular}<esc>2k^2f{a
" }
autocmd FileType awk inoremap ,for for (i = ; i < <++>; i++) {<cr>    <++><cr>}<esc>2k^f;i
autocmd FileType awk inoremap ,pf printf("")<esc>hi
autocmd FileType awk inoremap ,b BEGIN { FS=OFS="" }<esc>2hi
autocmd FileType awk inoremap ,if if () {<cr>    <++><cr>}<esc>2k^f(a
" )
autocmd FileType awk inoremap ,! #!/usr/bin/awk -E<cr>

autocmd FileType sh inoremap ,sh #!/bin/sh<CR>

autocmd FileType matlab inoremap ,f function [output] = functionname(inputvariable)<CR><CR>end<Esc>2k

autocmd FileType make inoremap ,v $()<Left>

autocmd FileType idf execute 'inoremap <localleader>i ! INCLUDE '
autocmd FileType idf inoremap <localleader>r Replace ECM

augroup END


" Event Type Autocmd mappings {{{1
augroup eventtypemappings
autocmd!
" cshtml - html - close enough
autocmd BufRead *.cshtml set filetype=html
" Remove trailing whitespace. Use keeppatterns so that
" the search history isn't ruined with the \v\s+$ junk.
" Setting the marks is required so that the cursor doesn't jump
" around.
autocmd BufWrite * execute "normal! mz" |  keeppatterns %s/\v\s+$//e | normal `z
" Make sure we are aware of when we are in insert mode.
autocmd InsertEnter * setlocal statusline=%#ErrorMsg#\ INSERT\ %.50F%=%y,C:%c,%p%%,HEX:%B,%{&ff},%{&encoding}
autocmd InsertLeave * setlocal statusline=%!g:basestatusline
augroup END

" [S]ession [w]rite
nnoremap <leader>sw :mksession! ~/defaultsession.vim<cr>
" [S]ession [l]oad
nnoremap <leader>sl :so ~/defaultsession.vim<cr>
" Toggle list setting
nnoremap <leader>ll :set list!<cr>

" Figure out what syntax group item under cursor is
function! SynGroup()
    let l:s = synID(line('.'), col('.'), 1)
    echo synIDattr(l:s, 'name') . ' -> ' . synIDattr(synIDtrans(l:s), 'name')
endfunction

" vim:ft=vim:foldmethod=marker
